<template>
  <el-container style="height: 100%">
    <el-header height="5%"><el-row class="toolPanel">
      <el-select v-model="conNameSearch" filterable
                 allow-create @change="selectCon(conNameSearch)"filterable clearable placeholder="请选择">
        <el-option
          v-for="item in conNameOptions"
          :key="item.value"
          :label="item.label"
          :value="item.value">
        </el-option>
      </el-select>
      <div style="float: right">
        <el-select v-model="conType" clearable  @change="selectConType(conType)" placeholder="请选择类型">
          <el-option
            v-for="item in conTypeArr"
            :key="item.value"
            :label="item.label"
            :value="item.value">
          </el-option>
        </el-select>
        <el-tooltip class="item" effect="dark" content="添加" placement="top-start">
          <el-button type="success" size="medium" icon="el-icon-circle-plus" circle style="float: right" @click="addCon"></el-button>
        </el-tooltip>
      </div>
      <div style="margin-left: 17.7%;margin-top: -3.2%;"><el-button slot="append" type="primary" icon="el-icon-search" @click="searchCon"></el-button></div>
    </el-row></el-header>
    <el-main style="height: 85%"><span>&emsp;</span>
      <el-row :gutter="10" style="width: 100%;">
        <el-col :span="6" v-for="con in conList">
          <div class="grid-content bg-purple">
            <el-card :body-style="{ padding: '0px'}" >
              <div style="padding: 14px;">
                {{ con.name }}
                <div class="bottom clearfix">
                  {{ con.type}}
                </div>
                <div class="bottom clearfix">
                  <el-tooltip class="item" effect="dark" content="编辑" placement="top-start">
                    <el-button type="primary" icon="el-icon-edit" size="mini" @click="handleEdit(con)" circle></el-button>
                  </el-tooltip>
                  <el-tooltip class="item" effect="dark" content="删除" placement="top-start">
                    <el-button type="danger" icon="el-icon-delete" size="mini" @click="handleDelete(con.name)" circle></el-button>
                  </el-tooltip>
                </div>
              </div>
            </el-card>
            <span>&emsp;</span>
          </div>
        </el-col>
      </el-row></el-main>
    <el-footer height="10%"><el-row class="paginationPanel">
      <el-pagination
        background
        layout="prev, pager, next"
        :total="this.total"
        :page-size="pageSize"
        @current-change="handleCurrentChange" :current-page="currentPage"
        @prev-click="handlePre" @next-click="handleNext"
      >
      </el-pagination>
    </el-row></el-footer>
    <el-dialog title="添加连接器"  :close-on-click-modal="false"   width="80%" style="height: auto" :visible.sync="dialogFormVisibleAdd">
      <el-row :gutter="20">
        <el-col :span="12"><div class="grid-content bg-purple">
        </div>
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" prop="name">
              <el-input v-model="conFormAdd.name" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="协议：" prop="protocolType">
              <el-input disabled v-model="conFormAdd.protocolType" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" prop="selfType">
              <el-select style="width: 186px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>

            <el-form-item label="是否可用：" prop="enable">
              <el-radio-group v-model="conFormAdd.enable">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </el-col>
      </el-row>
      <el-row :gutter="20">
        <el-col :span="12"><div class="grid-content bg-purple">
        </div>
          Mqtt Broker
          <el-form :model="mqttFormAdd" style="margin-left: 27%" :rules="mqttRule" ref="mqttFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="name">
              <el-input v-model="mqttFormAdd.name" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="地址：" prop="addr">
              <el-input v-model="mqttFormAdd.addr" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="端口：" prop="port">
              <el-input v-model="mqttFormAdd.port" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="clientId：" prop="clientId">
              <el-input v-model="mqttFormAdd.clientId" style="width: auto"></el-input>
            </el-form-item>
            <span>security --------------------------------------------------------</span>
            <el-form-item label="type：" prop="type">
              <el-input v-model="mqttFormAdd.type" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="用户名：" prop="username">
              <el-input v-model="mqttFormAdd.username" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="密码：" prop="password">
              <el-input v-model="mqttFormAdd.password" style="width: auto"></el-input>
            </el-form-item>
          </el-form>
        </el-col>
        <el-col :span="12"><div class="grid-content bg-purple"></div>
          服务端RPC
          <el-form :model="rpcFormAdd" style="margin-left: 27%" :rules="rpcRules" ref="rpcFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="设备名过滤：" prop="deviceNameGl">
              <el-input v-model="rpcFormAdd.deviceNameGl" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="方法过滤：" prop="methodGl">
              <el-input v-model="rpcFormAdd.methodGl" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="request topic：" prop="requestTopic">
              <el-input v-model="rpcFormAdd.requestTopic" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="response topic：" prop="responseTopic">
              <el-input v-model="rpcFormAdd.responseTopic" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="response 超时：" prop="responseCs">
              <el-input v-model="rpcFormAdd.responseCs" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="返回值表达式：" prop="returnExp">
              <el-input v-model="rpcFormAdd.returnExp" style="width: auto"></el-input>
            </el-form-item>
          </el-form>
        </el-col>
      </el-row>
      <el-row :gutter="20">
        <el-col :span="12"><div class="grid-content bg-purple"></div>
          监听连接Topic
          <el-tooltip class="item" effect="dark" content="添加" placement="top-start">
            <el-button type="success" size="mini" icon="el-icon-circle-plus" circle style="float: right" @click="addConTopic"></el-button>
          </el-tooltip>
          <el-form :model="conTopicForm" style="margin-left: 27%" :rules="conTopicRules" ref="conTopicForm" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="topic：" prop="topic">
              <el-input v-model="conTopicForm.topic" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="设备名匹配：" prop="deviceNamePp">
              <el-select v-model="conTopicForm.deviceNamePp" style="width: 65%;">
                <el-option label="json" value="json"></el-option>
                <el-option label="topic" value="topic"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="表达式：" prop="exp">
              <el-input v-model="conTopicForm.exp" style="width: auto"></el-input>
            </el-form-item>
          </el-form>
          <el-form :model="ConDynamicForm" style="margin-left: 27%" ref="ConDynamicForm" size="mini" label-width="130px" class="demo-ruleForm">
            <div v-for="(item, index) in ConDynamicForm.dynamicItem" :key="index">
              <span style="margin-left: 15%">------------------------------------------------------</span>
              <el-form-item
                label="topic"
                :prop="'dynamicItem.' + index + '.topic'"
                :rules="[
             {required: true, message: 'topic不能为空', trigger: 'blur'},
             { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
          ]"
              >
                <el-tooltip class="item" effect="dark" content="删除" placement="top-start">
                  <el-button type="warning" size="mini" icon="el-icon-delete" circle style="float: right" @click="deleteConTopicItem(item, index)"></el-button>
                </el-tooltip>

                <el-input v-model="item.topic" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item
                label="设备名匹配"
                :prop="'dynamicItem.' + index + '.deviceNamePp'"
                :rules="[
             {required: true, message: '请选择设备名匹配', trigger: 'change'},
          ]"
              >
                <el-select v-model="item.deviceNamePp">
                  <el-option label="json" value="json"></el-option>
                  <el-option label="topic" value="topic"></el-option>
                </el-select>
              </el-form-item>
              <el-form-item
                label="表达式"
                :prop="'dynamicItem.' + index + '.exp'"
                :rules="[
             {required: true, message: '表达式不能为空', trigger: 'blur'},
             { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
          ]"
              >
                <el-input v-model="item.exp" style="width: auto"></el-input>
              </el-form-item>
            </div>
          </el-form>
        </el-col>
        <el-col :span="12"><div class="grid-content bg-purple"></div>
          监听断开连接Topic
          <el-tooltip class="item" effect="dark" content="添加" placement="top-start">
            <el-button type="success" size="mini" icon="el-icon-circle-plus" circle style="float: right" @click="addDisConTopic"></el-button>
          </el-tooltip>
          <el-form :model="disConTopicForm" style="margin-left: 27%" :rules="disConTopicRules" ref="disConTopicForm" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="topic：" prop="topic">
              <el-input v-model="disConTopicForm.topic" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="设备名匹配：" prop="deviceNamePp">
              <el-select v-model="disConTopicForm.deviceNamePp" style="width: 65%;">
                <el-option label="json" value="json"></el-option>
                <el-option label="topic" value="topic"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="表达式：" prop="exp">
              <el-input v-model="disConTopicForm.exp" style="width: auto"></el-input>
            </el-form-item>
          </el-form>
          <el-form :model="disConDynamicForm" style="margin-left: 27%" ref="disConDynamicForm" size="mini" label-width="130px" class="demo-ruleForm">
            <div v-for="(item, index) in disConDynamicForm.dynamicItem" :key="index">
              <span style="margin-left: 15%">------------------------------------------------------</span>
              <el-form-item
                label="topic"
                :prop="'dynamicItem.' + index + '.topic'"
                :rules="[
             {required: true, message: 'topic不能为空', trigger: 'blur'},
             { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
          ]"
              >
                <el-tooltip class="item" effect="dark" content="删除" placement="top-start">
                  <el-button type="warning" size="mini" icon="el-icon-delete" circle style="float: right" @click="deleteDisConTopicItem(item, index)"></el-button>
                </el-tooltip>

                <el-input v-model="item.topic" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item
                label="设备名匹配"
                :prop="'dynamicItem.' + index + '.deviceNamePp'"
                :rules="[
            {required: true, message: '请选择设备名匹配', trigger: 'change'},

          ]"
              >
                <el-select v-model="item.deviceNamePp">
                  <el-option label="json" value="json"></el-option>
                  <el-option label="topic" value="topic"></el-option>
                </el-select>
              </el-form-item>
              <el-form-item
                label="表达式"
                :prop="'dynamicItem.' + index + '.exp'"
                :rules="[
             {required: true, message: '表达式不能为空', trigger: 'blur'},
             { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
          ]"
              >
                <el-input v-model="item.exp" style="width: auto"></el-input>
              </el-form-item>
            </div>
          </el-form>
        </el-col>
      </el-row>
      <div style="text-align: center">
        <el-button type="primary" @click="submitFormAdd('conFormAdd','mqttFormAdd','rpcFormAdd','conTopicForm','disConTopicForm','ConDynamicForm','disConDynamicForm')">提交</el-button>
        <el-button @click="resetAdd('conFormAdd','mqttFormAdd','rpcFormAdd','conTopicForm','disConTopicForm','ConDynamicForm','disConDynamicForm')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加连接器"  :close-on-click-modal="false"  width="60%" style="height: auto" :visible.sync="dialogFormVisibleAddZdy">
      Connector
      <el-form :model="conFormAddZdy" style="margin-left: 27%" :rules="conRuleZdy" ref="conFormAddZdy" size="mini" label-width="130px" class="demo-ruleForm">
        <el-form-item label="连接器名称：" prop="name">
          <el-input v-model="conFormAddZdy.name" style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="协议：" prop="protocolType">
          <el-input  v-model="conFormAddZdy.protocolType" style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="self_type：" prop="selfType">
          <el-select style="width: 186px" allow-create filterable v-model="conFormAddZdy.selfType" placeholder="请选择">
            <el-option
              v-for="item in this.selfTypeArr"
              :key="item.value"
              :label="item.label"
              :value="item.value">
            </el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="是否可用：" prop="enable">
          <el-radio-group v-model="conFormAddZdy.enable">
            <el-radio label="是"></el-radio>
            <el-radio label="否"></el-radio>
          </el-radio-group>
        </el-form-item>
        <el-form-item  prop="textJson">
          <el-input
            type="textarea"
            placeholder="请输入json"
            style="width: 36%"
            v-model="conFormAddZdy.textJson">
          </el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="submitFormAddZdy('conFormAddZdy')">提交</el-button>
          <el-button @click="resetAddZdy('conFormAddZdy')">重置</el-button>
        </el-form-item>
      </el-form>
    </el-dialog>
    <el-dialog title="添加Server"  :close-on-click-modal="false"  width="60%" :visible.sync="dialogFormVisibleModbusAdd">
      <el-row :gutter="20" style="margin-left: 20%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" prop="name">
              <el-input v-model="conFormAdd.name" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="协议：" prop="protocolType">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" prop="selfType">
              <el-select style="width: 142px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" prop="enable">
              <el-radio-group v-model="conFormAdd.enable">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 20%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Server
          <el-form :model="conFormModbusAdd" style="margin-left: 27%" :rules="conModbusRule" ref="conFormModbusAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="类型：" prop="type" style="width: 114%">
              <el-select v-model="conFormModbusAdd.type">
                <el-option label="tcp" value="tcp"></el-option>
                <el-option label="udp" value="udp"></el-option>
                <el-option label="serial" value="serial"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="method：" prop="method" style="width: 114%">
              <el-select v-model="conFormModbusAdd.method">
                <el-option label="socket" value="socket"></el-option>
                <el-option label="rtu" value="rtu"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="地址：" prop="addr">
              <el-input v-model="conFormModbusAdd.addr" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="端口：" prop="port">
              <el-input v-model="conFormModbusAdd.port" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="波特率：" prop="baudrate">
              <el-input v-model="conFormModbusAdd.baudrate" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="连接超时：" prop="timeOut">
              <el-input v-model="conFormModbusAdd.timeOut" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="字节顺序：" prop="byteOrder" style="width: 114%">
              <el-select v-model="conFormModbusAdd.byteOrder">
                <el-option label="BIG" value="BIG"></el-option>
                <el-option label="LITTLE" value="LITTLE"></el-option>
              </el-select>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormModbusAdd('conFormAdd','conFormModbusAdd')">提交</el-button>
        <el-button @click="resetModbusAdd('conFormAdd','conFormModbusAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Mitsubishi"  :close-on-click-modal="false"  width="60%"  :visible.sync="dialogFormVisiblePlcAdd">
      <el-row :gutter="20" style="margin-left: 20%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" prop="name">
              <el-input v-model="conFormAdd.name" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="协议：" prop="protocolType">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" prop="selfType">
              <el-select style="width: 142px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" prop="enable">
              <el-radio-group v-model="conFormAdd.enable">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 20%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Mitsubishi
          <el-form :model="conFormPlcAdd" style="margin-left: 27%" :rules="conPlcRule" ref="conFormPlcAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="类型：" prop="type" style="width: 114%">
              <el-select v-model="conFormPlcAdd.type">
                <el-option label="tcp" value="tcp"></el-option>
                <el-option label="udp" value="udp"></el-option>
                <el-option label="serial" value="serial"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="method：" prop="method" style="width: 114%">
              <el-select v-model="conFormPlcAdd.method">
                <el-option label="socket" value="socket"></el-option>
                <el-option label="rtu" value="rtu"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="地址：" prop="addr">
              <el-input v-model="conFormPlcAdd.addr" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="端口：" prop="port">
              <el-input v-model="conFormPlcAdd.port" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="连接超时：" prop="timeOut">
              <el-input v-model="conFormPlcAdd.timeOut" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="字节顺序：" prop="byteOrder" style="width: 114%">
              <el-select v-model="conFormPlcAdd.byteOrder">
                <el-option label="BIG" value="BIG"></el-option>
                <el-option label="LITTLE" value="LITTLE"></el-option>
              </el-select>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormPlcAdd('conFormAdd','conFormPlcAdd')">提交</el-button>
        <el-button @click="resetPlcAdd('conFormAdd','conFormPlcAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Opcua"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleOpcuaAdd">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 144px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormAdd.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Opcua
          <el-form :model="conFormOpcuaAdd" style="margin-left: 27%" :rules="conOpcuaRule" ref="conFormOpcuaAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="name" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOpcuaAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="地址：" prop="url" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOpcuaAdd.url" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="timeoutInMillis：" label-width="45%" prop="timeoutInMillis" style="width: 150%">
              <el-input v-model="conFormOpcuaAdd.timeoutInMillis" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="scanPeriodInMillis：" label-width="45%" prop="scanPeriodInMillis" style="width: 150%">
              <el-input v-model="conFormOpcuaAdd.scanPeriodInMillis" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="disableSubscriptions：" label-width="45%" prop="disableSubscriptions" style="width: 150%">
              <el-radio-group v-model="conFormOpcuaAdd.disableSubscriptions" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="subCheckPeriodInMillis：" label-width="45%" prop="subCheckPeriodInMillis" style="width: 150%">
              <el-input v-model="conFormOpcuaAdd.subCheckPeriodInMillis" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="showMap：" label-width="45%" prop="showMap"style="width: 150%">
              <el-radio-group v-model="conFormOpcuaAdd.showMap" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="security：" label-width="45%" prop="security"style="width: 150%">
              <el-input v-model="conFormOpcuaAdd.security" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="type：" label-width="45%" prop="type"style="width: 150%">
              <el-input v-model="conFormOpcuaAdd.type" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormOpcuaAdd('conFormAdd','conFormOpcuaAdd')">提交</el-button>
        <el-button @click="resetOpcuaAdd('conFormAdd','conFormOpcuaAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Ble"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleBleAdd">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 144px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormAdd.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Ble
          <el-form :model="conFormBleAdd" style="margin-left: 27%" :rules="conBleRule" ref="conFormBleAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="name" label-width="45%" style="width: 150%">
              <el-input v-model="conFormBleAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="rescanIntervalSeconds：" prop="rescanIntervalSeconds" label-width="45%" style="width: 150%">
              <el-input v-model="conFormBleAdd.rescanIntervalSeconds" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="checkIntervalSeconds：" label-width="45%" prop="checkIntervalSeconds" style="width: 150%">
              <el-input v-model="conFormBleAdd.checkIntervalSeconds" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="scanTimeSeconds：" label-width="45%" prop="scanTimeSeconds" style="width: 150%">
              <el-input v-model="conFormBleAdd.scanTimeSeconds" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="是否扫描：" label-width="45%" prop="passiveScanMode" style="width: 150%">
              <el-radio-group v-model="conFormBleAdd.passiveScanMode" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormBleAdd('conFormAdd','conFormBleAdd')">提交</el-button>
        <el-button @click="resetBleAdd('conFormAdd','conFormBleAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Bacnet"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleBacnetAdd">
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 141px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormAdd.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Bacnet
          <el-form :model="conFormBacnetAdd" style="margin-left: 27%" :rules="conBacnetRule" ref="conFormBacnetAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="objectName" label-width="45%" style="width: 150%">
              <el-input v-model="conFormBacnetAdd.objectName" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="address：" prop="address" label-width="45%" style="width: 150%">
              <el-input v-model="conFormBacnetAdd.address" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="objectIdentifier：" label-width="45%" prop="objectIdentifier" style="width: 150%">
              <el-input v-model="conFormBacnetAdd.objectIdentifier" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="maxApduLengthAccepted：" label-width="45%" prop="maxApduLengthAccepted" style="width: 150%">
              <el-input v-model="conFormBacnetAdd.maxApduLengthAccepted" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="segmentationSupported：" label-width="45%" prop="segmentationSupported" style="width: 150%">
              <el-input v-model="conFormBacnetAdd.segmentationSupported" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="vendorIdentifier：" label-width="45%" prop="vendorIdentifier" style="width: 150%">
              <el-input v-model="conFormBacnetAdd.vendorIdentifier" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormBacnetAdd('conFormAdd','conFormBacnetAdd')">提交</el-button>
        <el-button @click="resetBacnetAdd('conFormAdd','conFormBacnetAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Rtu"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleRtuAdd">
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 140px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormAdd.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Rtu
          <el-form :model="conFormRtuAdd" style="margin-left: 27%" :rules="conRtuRule" ref="conFormRtuAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="name" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRtuAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="类型：" prop="type" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRtuAdd.type" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="方式：" label-width="45%" prop="method" style="width: 150%">
              <el-input v-model="conFormRtuAdd.method" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="端口：" label-width="45%" prop="port" style="width: 150%">
              <el-input v-model="conFormRtuAdd.port" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="波特率：" label-width="45%" prop="baudrate" style="width: 150%">
              <el-input v-model="conFormRtuAdd.baudrate" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="超时时间：" label-width="45%" prop="timeout" style="width: 150%">
              <el-input v-model="conFormRtuAdd.timeout" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="地址：" label-width="45%" prop="host" style="width: 150%">
              <el-input v-model="conFormRtuAdd.host" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="字节顺序：" label-width="45%" prop="byteOrder" style="width: 150%">
              <el-input v-model="conFormRtuAdd.byteOrder" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormRtuAdd('conFormAdd','conFormRtuAdd')">提交</el-button>
        <el-button @click="resetRtuAdd('conFormAdd','conFormRtuAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Request"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleRequestAdd">
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 140px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormAdd.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Request
          <el-form :model="conFormRequestAdd" style="margin-left: 27%" :rules="conRequestRule" ref="conFormRequestAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="地址：" prop="host" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRequestAdd.host" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="是否SSL核实：" label-width="45%" prop="SSLVerify" style="width: 150%">
              <el-radio-group v-model="conFormRequestAdd.SSLVerify" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="类型：" prop="type" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRequestAdd.type" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="用户名：" label-width="45%" prop="username" style="width: 150%">
              <el-input v-model="conFormRequestAdd.username" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="密码：" label-width="45%" prop="password" style="width: 150%">
              <el-input v-model="conFormRequestAdd.password" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormRequestAdd('conFormAdd','conFormRequestAdd')">提交</el-button>
        <el-button @click="resetRequestAdd('conFormAdd','conFormRequestAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Odbc"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleOdbcAdd">
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 140px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormAdd.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Odbc
          <el-form :model="conFormOdbcAdd" style="margin-left: 27%" :rules="conOdbcRule" ref="conFormOdbcAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="str：" prop="str" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.str" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="autocommit：" label-width="45%" prop="autocommit" style="width: 150%">
              <el-radio-group v-model="conFormOdbcAdd.autocommit" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="timeout：" prop="timeout" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.timeout" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="encoding：" prop="encoding" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.encoding" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="char：" prop="char" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.char" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="wchar：" prop="wchar" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.wchar" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="metadata：" prop="metadata" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.metadata" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="reconnect：" label-width="45%" prop="reconnect" style="width: 150%">
              <el-radio-group v-model="conFormOdbcAdd.reconnect" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="reconnectPeriod：" prop="reconnectPeriod" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.reconnectPeriod" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="pooling：" label-width="45%" prop="pooling" style="width: 150%">
              <el-radio-group v-model="conFormOdbcAdd.pooling" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="poll_Query：" prop="poll_Query" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.poll_Query" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="period：" prop="period" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.period" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="column：" prop="column" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.column" style="width: 60%;"></el-input>
            </el-form-item>

            <el-form-item label="ite_Query：" prop="ite_Query" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcAdd.ite_Query" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="persistent：" label-width="45%" prop="persistent" style="width: 150%">
              <el-radio-group v-model="conFormOdbcAdd.persistent" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormOdbcAdd('conFormAdd','conFormOdbcAdd')">提交</el-button>
        <el-button @click="resetOdbcAdd('conFormAdd','conFormOdbcAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Rest"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleRestAdd">
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 145px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormAdd.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Rest
          <el-form :model="conFormRestAdd" style="margin-left: 27%" :rules="conRestRule" ref="conFormRestAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="host：" prop="host" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRestAdd.host" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="port：" prop="port" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRestAdd.port" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormRestAdd('conFormAdd','conFormRestAdd')">提交</el-button>
        <el-button @click="resetRestAdd('conFormAdd','conFormRestAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="添加Serial"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleSerialAdd">
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormAdd" style="margin-left: 27%" :rules="conRule" ref="conFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormAdd.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 144px" allow-create filterable v-model="conFormAdd.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormAdd.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 15%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Serial
          <el-form :model="conFormSerialAdd" style="margin-left: 27%" :rules="conSerialRule" ref="conFormSerialAdd" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="name：" prop="name" label-width="45%" style="width: 150%">
              <el-input v-model="conFormSerialAdd.name" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormSerialAdd('conFormAdd','conFormSerialAdd')">提交</el-button>
        <el-button @click="resetSerialAdd('conFormAdd','conFormSerialAdd')">重置</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑modbus"  :before-close="handleClose"  :close-on-click-modal="false" :modal-append-to-body = "false" :close-on-press-escape="false" width="80%" style="height: auto" :visible.sync="dialogFormVisibleModbusEdit">
      <el-row :gutter="20">
        <el-col :span="12"><div class="grid-content bg-purple">
        </div>
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" prop="name">
              <el-input disabled v-model="conFormEdit.name" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="协议：" prop="protocolType" >
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 68%">
              <el-select style="width: 118%;margin-left: 1%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" prop="enable">
              <el-radio-group v-model="conFormEdit.enable">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </el-col>
      </el-row>
      <el-row :gutter="20">
        <el-col :span="12"><div class="grid-content bg-purple">
        </div>
          Server
          <el-form :model="modbusFormEdit" style="margin-left: 27%" :rules="conModbusRule" ref="modbusFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="类型：" prop="type" style="width: 75%">
              <el-select v-model="modbusFormEdit.type">
                <el-option label="tcp" value="tcp"></el-option>
                <el-option label="udp" value="udp"></el-option>
                <el-option label="serial" value="serial"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="method：" prop="method" style="width: 75%">
              <el-select v-model="modbusFormEdit.method">
                <el-option label="socket" value="socket"></el-option>
                <el-option label="rtu" value="rtu"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="地址：" prop="addr" style="width: 75%">
              <el-input v-model="modbusFormEdit.addr" ></el-input>
            </el-form-item>
            <el-form-item label="端口：" prop="port" style="width: 75%">
              <el-input v-model="modbusFormEdit.port"></el-input>
            </el-form-item>
            <el-form-item label="波特率：" prop="baudrate" style="width: 75%">
              <el-input v-model="modbusFormEdit.baudrate"></el-input>
            </el-form-item>
            <el-form-item label="连接超时：" prop="timeOut" style="width: 75%">
              <el-input v-model="modbusFormEdit.timeOut"></el-input>
            </el-form-item>
            <el-form-item label="字节顺序：" prop="byteOrder" style="width: 75%">
              <el-select v-model="modbusFormEdit.byteOrder">
                <el-option label="BIG" value="BIG"></el-option>
                <el-option label="LITTLE" value="LITTLE"></el-option>
              </el-select>
            </el-form-item>
          </el-form>
        </el-col>
      </el-row>
      <div style="text-align: center">
        <el-button type="primary" @click="submitModbusFormEdit('conFormEdit','modbusFormEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Mitsubishi"  :before-close="handleClose"  :close-on-click-modal="false" :modal-append-to-body = "false" :close-on-press-escape="false" width="80%" style="height: auto" :visible.sync="dialogFormVisiblePlcEdit">
      <el-row :gutter="20">
        <el-col :span="12"><div class="grid-content bg-purple">
        </div>
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" prop="name">
              <el-input disabled v-model="conFormEdit.name" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="协议：" prop="protocolType" >
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 69%">
              <el-select style="width: 117%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" prop="enable">
              <el-radio-group v-model="conFormEdit.enable">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </el-col>
      </el-row>
      <el-row :gutter="20">
        <el-col :span="12"><div class="grid-content bg-purple">
        </div>
          Mitsubishi
          <el-form :model="plcFormEdit" style="margin-left: 27%" :rules="conPlcEditRule" ref="plcFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="类型：" prop="type" style="width: 114%">
              <el-select v-model="plcFormEdit.type">
                <el-option label="tcp" value="tcp"></el-option>
                <el-option label="udp" value="udp"></el-option>
                <el-option label="serial" value="serial"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="method：" prop="method" style="width: 114%">
              <el-select v-model="plcFormEdit.method">
                <el-option label="socket" value="socket"></el-option>
                <el-option label="rtu" value="rtu"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="地址：" prop="addr">
              <el-input v-model="plcFormEdit.addr" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="端口：" prop="port">
              <el-input v-model="plcFormEdit.port" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="连接超时：" prop="timeOut">
              <el-input v-model="plcFormEdit.timeOut" style="width: 130%"></el-input>
            </el-form-item>
            <el-form-item label="字节顺序：" prop="byteOrder" style="width: 114%">
              <el-select v-model="plcFormEdit.byteOrder">
                <el-option label="BIG" value="BIG"></el-option>
                <el-option label="LITTLE" value="LITTLE"></el-option>
              </el-select>
            </el-form-item>
          </el-form>
        </el-col>
      </el-row>
      <div style="text-align: center">
        <el-button type="primary" @click="submitPlcFormEdit('conFormEdit','plcFormEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑mqtt"  :before-close="handleClose"  :close-on-click-modal="false" :modal-append-to-body = "false" :close-on-press-escape="false" width="70%" style="height: auto" :visible.sync="dialogFormVisibleEdit">
      <el-tabs v-model="activeName" type="card">
        <el-tab-pane label="连接器" name="first"><el-row :gutter="20">
          <el-col :span="12"><div class="grid-content bg-purple">
          </div>
            Connector
            <el-form :model="conFormEdit" style="margin-left: 30%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
              <el-form-item label="连接器名称：" prop="name">
                <el-input disabled v-model="conFormEdit.name" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item label="协议：" prop="protocolType">
                <el-input  disabled v-model="conFormEdit.protocolType" style="width:auto"></el-input>
              </el-form-item>
              <el-form-item label="self_type：" label-width="37%" prop="selfType" style="width: auto">
                <el-select  style="width: 85%;margin-left: 1% " v-model="conFormEdit.selfType" placeholder="请选择">
                  <el-option
                    v-for="item in this.selfTypeArr"
                    :key="item.value"
                    :label="item.label"
                    :value="item.value">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item label="是否可用：" prop="enable">
                <el-radio-group v-model="conFormEdit.enable">
                  <el-radio label="是"></el-radio>
                  <el-radio label="否"></el-radio>
                </el-radio-group>
              </el-form-item>
            </el-form>
          </el-col>
        </el-row></el-tab-pane>
        <el-tab-pane label="MQTT" name="second"><el-row :gutter="20">
          <el-col :span="12"><div class="grid-content bg-purple">
          </div>
            Mqtt Broker
            <el-form :model="mqttFormEdit" style="margin-left: 27%" :rules="mqttRule" ref="mqttFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
              <el-form-item label="名称：" prop="name">
                <el-input v-model="mqttFormEdit.name" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item label="地址：" prop="addr">
                <el-input v-model="mqttFormEdit.addr" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item label="端口：" prop="port">
                <el-input v-model="mqttFormEdit.port" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item label="clientId：" prop="clientId">
                <el-input v-model="mqttFormEdit.clientId" style="width: auto"></el-input>
              </el-form-item>
              <span>security --------------------------------------------------------</span>
              <el-form-item label="type：" prop="type">
                <el-input v-model="mqttFormEdit.type" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item label="用户名：" prop="username">
                <el-input v-model="mqttFormEdit.username" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item label="密码：" prop="password">
                <el-input v-model="mqttFormEdit.password" style="width: auto"></el-input>
              </el-form-item>
            </el-form>
          </el-col>
        </el-row></el-tab-pane>
        <el-tab-pane label="监听连接Topic" name="third"><el-col :span="12"><div class="grid-content bg-purple"></div>
          监听连接Topic
          <el-tooltip class="item" effect="dark" content="添加" placement="top-start">
            <el-button type="success" size="mini" icon="el-icon-circle-plus" circle style="float: right" @click="addConTopicEdit"></el-button>
          </el-tooltip>
          <el-form :model="conTopicFormEdit" style="margin-left: 27%" :rules="conTopicRules" ref="conTopicFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="topic：" prop="topic">
              <el-input v-model="conTopicFormEdit.topic" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="设备名匹配：" prop="deviceNamePp">
              <el-select v-model="conTopicFormEdit.deviceNamePp" style="width: 79%">
                <el-option label="json" value="json"></el-option>
                <el-option label="topic" value="topic"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="表达式：" prop="exp">
              <el-input v-model="conTopicFormEdit.exp" style="width: auto"></el-input>
            </el-form-item>
          </el-form>
          <el-form :model="ConDynamicFormEdit" style="margin-left: 27%" ref="ConDynamicFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <div v-for="(item, index) in ConDynamicFormEdit.dynamicItem" :key="index">
              <span style="margin-left: 15%">------------------------------------------------------</span>
              <el-form-item
                label="topic"
                :prop="'dynamicItem.' + index + '.topic'"
                :rules="[
             {required: true, message: 'topic不能为空', trigger: 'blur'},
             { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
          ]"
              >
                <el-tooltip class="item" effect="dark" content="删除" placement="top-start">
                  <el-button type="warning" size="mini" icon="el-icon-delete" circle style="float: right" @click="deleteConTopicItemEdit(item, index)"></el-button>
                </el-tooltip>

                <el-input v-model="item.topic" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item
                label="设备名匹配"
                :prop="'dynamicItem.' + index + '.deviceNamePp'"
                :rules="[
             {required: true, message: '请选择设备名匹配', trigger: 'change'},
          ]"
              >
                <el-select v-model="item.deviceNamePp" style="width: 79%">
                  <el-option label="json" value="json"></el-option>
                  <el-option label="topic" value="topic"></el-option>
                </el-select>
              </el-form-item>
              <el-form-item
                label="表达式"
                :prop="'dynamicItem.' + index + '.exp'"
                :rules="[
             {required: true, message: '表达式不能为空', trigger: 'blur'},
             { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
          ]"
              >
                <el-input v-model="item.exp" style="width: auto"></el-input>
              </el-form-item>
            </div>
          </el-form>
        </el-col></el-tab-pane>
        <el-tab-pane label="监听断开Topic" name="fourth"><el-col :span="12"><div class="grid-content bg-purple"></div>
          监听断开连接Topic
          <el-tooltip class="item" effect="dark" content="添加" placement="top-start">
            <el-button type="success" size="mini" icon="el-icon-circle-plus" circle style="float: right" @click="addDisConTopicEdit"></el-button>
          </el-tooltip>
          <el-form :model="disConTopicFormEdit" style="margin-left: 27%" :rules="disConTopicRules" ref="disConTopicFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="topic：" prop="topic">
              <el-input v-model="disConTopicFormEdit.topic" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="设备名匹配：" prop="deviceNamePp" >
              <el-select v-model="disConTopicFormEdit.deviceNamePp" style="width: 79%">
                <el-option label="json" value="json"></el-option>
                <el-option label="topic" value="topic"></el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="表达式：" prop="exp">
              <el-input v-model="disConTopicFormEdit.exp" style="width: auto"></el-input>
            </el-form-item>
          </el-form>
          <el-form :model="disConDynamicFormEdit" style="margin-left: 27%" ref="disConDynamicFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <div v-for="(item, index) in disConDynamicFormEdit.dynamicItem" :key="index">
              <span style="margin-left: 15%">------------------------------------------------------</span>
              <el-form-item
                label="topic"
                :prop="'dynamicItem.' + index + '.topic'"
                :rules="[
             {required: true, message: 'topic不能为空', trigger: 'blur'},
             { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
          ]"
              >
                <el-tooltip class="item" effect="dark" content="删除" placement="top-start">
                  <el-button type="warning" size="mini" icon="el-icon-delete" circle style="float: right" @click="deleteDisConTopicItemEdit(item, index)"></el-button>
                </el-tooltip>

                <el-input v-model="item.topic" style="width: auto"></el-input>
              </el-form-item>
              <el-form-item
                label="设备名匹配"
                :prop="'dynamicItem.' + index + '.deviceNamePp'"
                :rules="[
            {required: true, message: '请选择设备名匹配', trigger: 'change'},

          ]"
              >
                <el-select v-model="item.deviceNamePp" style="width: 79%">
                  <el-option label="json" value="json"></el-option>
                  <el-option label="topic" value="topic"></el-option>
                </el-select>
              </el-form-item>
              <el-form-item
                label="表达式"
                :prop="'dynamicItem.' + index + '.exp'"
                :rules="[
             {required: true, message: '表达式不能为空', trigger: 'blur'},
             { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
          ]"
              >
                <el-input v-model="item.exp" style="width: auto"></el-input>
              </el-form-item>
            </div>
          </el-form>
        </el-col></el-tab-pane>
        <el-tab-pane label="服务端RPC" name="fifth"><el-col :span="12"><div class="grid-content bg-purple"></div>
          服务端RPC
          <el-form :model="rpcFormEdit" style="margin-left: 27%"  ref="rpcFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="设备名过滤：" prop="deviceNameGl">
              <el-input v-model="rpcFormEdit.deviceNameGl" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="方法过滤：" prop="methodGl">
              <el-input v-model="rpcFormEdit.methodGl" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="request topic：" prop="requestTopic">
              <el-input v-model="rpcFormEdit.requestTopic" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="response topic：" prop="responseTopic">
              <el-input v-model="rpcFormEdit.responseTopic" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="response 超时：" prop="responseCs">
              <el-input v-model="rpcFormEdit.responseCs" style="width: auto"></el-input>
            </el-form-item>
            <el-form-item label="返回值表达式：" prop="returnExp">
              <el-input v-model="rpcFormEdit.returnExp" style="width: auto"></el-input>
            </el-form-item>
          </el-form>
        </el-col></el-tab-pane>
      </el-tabs>
      <div style="text-align: center">
        <el-button type="primary" @click="submitFormEdit('conFormEdit','mqttFormEdit','conTopicFormEdit','disConTopicFormEdit','ConDynamicFormEdit','disConDynamicFormEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Opcua"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleOpcuaEdit">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 61%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormEdit.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Opcua
          <el-form :model="conFormOpcuaEdit" style="margin-left: 27%" :rules="conOpcuaRule" ref="conFormOpcuaEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="name" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOpcuaEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="地址：" prop="url" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOpcuaEdit.url" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="timeoutInMillis：" label-width="45%" prop="timeoutInMillis" style="width: 150%">
              <el-input v-model="conFormOpcuaEdit.timeoutInMillis" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="scanPeriodInMillis：" label-width="45%" prop="scanPeriodInMillis" style="width: 150%">
              <el-input v-model="conFormOpcuaEdit.scanPeriodInMillis" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="disableSubscriptions：" label-width="45%" prop="disableSubscriptions" style="width: 150%">
              <el-radio-group v-model="conFormOpcuaEdit.disableSubscriptions" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="subCheckPeriodInMillis：" label-width="45%" prop="subCheckPeriodInMillis" style="width: 150%">
              <el-input v-model="conFormOpcuaEdit.subCheckPeriodInMillis" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="showMap：" label-width="45%" prop="showMap"style="width: 150%">
              <el-radio-group v-model="conFormOpcuaEdit.showMap" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="security：" label-width="45%" prop="security"style="width: 150%">
              <el-input v-model="conFormOpcuaEdit.security" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="type：" label-width="45%" prop="type"style="width: 150%">
              <el-input v-model="conFormOpcuaEdit.type" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormOpcuaEdit('conFormEdit','conFormOpcuaEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Ble"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleBleEdit">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 61%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormEdit.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Ble
          <el-form :model="conFormBleEdit" style="margin-left: 27%" :rules="conBleRule" ref="conFormBleEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="name" label-width="45%" style="width: 150%">
              <el-input v-model="conFormBleEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="rescanIntervalSeconds：" prop="rescanIntervalSeconds" label-width="45%" style="width: 150%">
              <el-input v-model="conFormBleEdit.rescanIntervalSeconds" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="checkIntervalSeconds：" label-width="45%" prop="checkIntervalSeconds" style="width: 150%">
              <el-input v-model="conFormBleEdit.checkIntervalSeconds" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="scanTimeSeconds：" label-width="45%" prop="scanTimeSeconds" style="width: 150%">
              <el-input v-model="conFormBleEdit.scanTimeSeconds" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="passiveScanMode：" label-width="45%" prop="passiveScanMode" style="width: 150%">
              <el-radio-group v-model="conFormBleEdit.passiveScanMode" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormBleEdit('conFormEdit','conFormBleEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Bacnet"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleBacnetEdit">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 61%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormEdit.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Ble
          <el-form :model="conFormBacnetEdit" style="margin-left: 27%" :rules="conBacnetRule" ref="conFormBacnetEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="objectName" label-width="45%" style="width: 150%">
              <el-input v-model="conFormBacnetEdit.objectName" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="address：" prop="address" label-width="45%" style="width: 150%">
              <el-input v-model="conFormBacnetEdit.address" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="objectIdentifier：" label-width="45%" prop="objectIdentifier" style="width: 150%">
              <el-input v-model="conFormBacnetEdit.objectIdentifier" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="maxApduLengthAccepted：" label-width="45%" prop="maxApduLengthAccepted" style="width: 150%">
              <el-input v-model="conFormBacnetEdit.maxApduLengthAccepted" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="segmentationSupported：" label-width="45%" prop="segmentationSupported" style="width: 150%">
              <el-input v-model="conFormBacnetEdit.segmentationSupported" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="vendorIdentifier：" label-width="45%" prop="vendorIdentifier" style="width: 150%">
              <el-input v-model="conFormBacnetEdit.vendorIdentifier" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormBacnetEdit('conFormEdit','conFormBacnetEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Rtu"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleRtuEdit">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 61%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormEdit.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Rtu
          <el-form :model="conFormRtuEdit" style="margin-left: 27%" :rules="conRtuRule" ref="conFormRtuEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="名称：" prop="name" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRtuEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="类型：" prop="type" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRtuEdit.type" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="方式：" label-width="45%" prop="method" style="width: 150%">
              <el-input v-model="conFormRtuEdit.method" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="端口：" label-width="45%" prop="port" style="width: 150%">
              <el-input v-model="conFormRtuEdit.port" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="波特率：" label-width="45%" prop="baudrate" style="width: 150%">
              <el-input v-model="conFormRtuEdit.baudrate" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="超时时间：" label-width="45%" prop="timeout" style="width: 150%">
              <el-input v-model="conFormRtuEdit.timeout" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="地址：" label-width="45%" prop="host" style="width: 150%">
              <el-input v-model="conFormRtuEdit.host" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="字节顺序：" label-width="45%" prop="byteOrder" style="width: 150%">
              <el-input v-model="conFormRtuEdit.byteOrder" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormRtuEdit('conFormEdit','conFormRtuEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Request"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleRequestEdit">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 61%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormEdit.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Request
          <el-form :model="conFormRequestEdit" style="margin-left: 27%" :rules="conRequestRule" ref="conFormRequestEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="地址：" prop="host" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRequestEdit.host" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="是否SSL核实：" label-width="45%" prop="SSLVerify" style="width: 150%">
              <el-radio-group v-model="conFormRequestEdit.SSLVerify" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="类型：" label-width="45%" prop="type" style="width: 150%">
              <el-input v-model="conFormRequestEdit.type" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="用户名：" label-width="45%" prop="username" style="width: 150%">
              <el-input v-model="conFormRequestEdit.username" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="密码：" label-width="45%" prop="password" style="width: 150%">
              <el-input v-model="conFormRequestEdit.password" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormRequestEdit('conFormEdit','conFormRequestEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Odbc"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleOdbcEdit">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 61%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormEdit.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Request
          <el-form :model="conFormOdbcEdit" style="margin-left: 27%" :rules="conOdbcRule" ref="conFormOdbcEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="str：" prop="str" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.str" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="autocommit：" label-width="45%" prop="autocommit" style="width: 150%">
              <el-radio-group v-model="conFormOdbcEdit.autocommit" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="timeout：" prop="timeout" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.timeout" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="encoding：" prop="encoding" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.encoding" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="char：" prop="char" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.char" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="wchar：" prop="wchar" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.wchar" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="metadata：" prop="metadata" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.metadata" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="reconnect：" label-width="45%" prop="reconnect" style="width: 150%">
              <el-radio-group v-model="conFormOdbcEdit.reconnect" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="reconnectPeriod：" prop="reconnectPeriod" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.reconnectPeriod" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="pooling：" label-width="45%" prop="pooling" style="width: 150%">
              <el-radio-group v-model="conFormOdbcEdit.pooling" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="poll_Query：" prop="poll_Query" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.poll_Query" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="period：" prop="period" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.period" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="column：" prop="column" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.column" style="width: 60%;"></el-input>
            </el-form-item>

            <el-form-item label="ite_Query：" prop="ite_Query" label-width="45%" style="width: 150%">
              <el-input v-model="conFormOdbcEdit.ite_Query" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="persistent：" label-width="45%" prop="persistent" style="width: 150%">
              <el-radio-group v-model="conFormOdbcEdit.persistent" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormOdbcEdit('conFormEdit','conFormOdbcEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Rest"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleRestEdit">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 61%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormEdit.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Rest
          <el-form :model="conFormRestEdit" style="margin-left: 27%" :rules="conRestRule" ref="conFormRestEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="host：" prop="host" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRestEdit.host" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="port：" prop="port" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRestEdit.port" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormRestEdit('conFormEdit','conFormRestEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
    <el-dialog title="编辑Serial"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleSerialEdit">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Connector
          <el-form :model="conFormEdit" style="margin-left: 27%" :rules="conRuleEdit" ref="conFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="连接器名称：" label-width="45%" prop="name" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="协议：" label-width="45%" prop="protocolType" style="width: 150%">
              <el-input  disabled v-model="conFormEdit.protocolType" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="self_type：" label-width="45%" prop="selfType" style="width: 150%">
              <el-select style="width: 61%" v-model="conFormEdit.selfType" placeholder="请选择">
                <el-option
                  v-for="item in this.selfTypeArr"
                  :key="item.value"
                  :label="item.label"
                  :value="item.value">
                </el-option>
              </el-select>
            </el-form-item>
            <el-form-item label="是否可用：" label-width="45%" prop="enable" style="width: 150%">
              <el-radio-group v-model="conFormEdit.enable" style="margin-left: 3%">
                <el-radio label="是"></el-radio>
                <el-radio label="否"></el-radio>
              </el-radio-group>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Serial
          <el-form :model="conFormSerialEdit" style="margin-left: 27%" :rules="conRestRule" ref="conFormSerialEdit" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="name：" prop="name" label-width="45%" style="width: 150%">
              <el-input v-model="conFormSerialEdit.name" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormSerialEdit('conFormEdit','conFormSerialEdit')">提交</el-button>
        <el-button @click="cancle()">取消</el-button>
      </div>
    </el-dialog>
  </el-container>
</template>

<script>

import {addCon, deleteConByconName, selectAllFromCon, updateConByName} from "../../api/connector";
import $ from "jquery";


export default {
  name: "connectorConfig",
  data (){
    return {
      dataCon: [],
      ConDynamicForm: {
        dynamicItem: []
      },
      disConDynamicForm: {
        dynamicItem: []
      },
      ConDynamicFormEdit: {
        dynamicItem: []
      },
      disConDynamicFormEdit: {
        dynamicItem: []
      },
      conFormAdd: {
        name: '',
        protocolType: '',
        selfType: '',
        enable: ''
      },
      conFormModbusAdd: {
        type: '',
        method: '',
        addr: '',
        port: '',
        timeOut: '',
        byteOrder: '',
        baudrate: ''
      },
      conFormPlcAdd: {
        type: '',
        method: '',
        addr: '',
        port: '',
        timeOut: '',
        byteOrder: ''
      },
      conFormOpcuaAdd: {
        name: '',
        url: '',
        timeoutInMillis: '',
        scanPeriodInMillis: '',
        disableSubscriptions: '',
        subCheckPeriodInMillis: '',
        showMap: '',
        security: '',
        type: ''
      },
      conFormBleAdd: {
        name: '',
        rescanIntervalSeconds: '',
        checkIntervalSeconds: '',
        scanTimeSeconds: '',
        passiveScanMode: ''
      },
      conFormBacnetAdd: {
        objectName: '',
        address: '',
        objectIdentifier: '',
        maxApduLengthAccepted: '',
        segmentationSupported: '',
        vendorIdentifier: ''
      },
      conFormRtuAdd: {
        name: '',
        type: '',
        method: '',
        port: '',
        baudrate: '',
        timeout: '',
        host: '',
        byteOrder: ''
      },
      conFormRtuEdit: {
        name: '',
        type: '',
        method: '',
        port: '',
        baudrate: '',
        timeout: '',
        host: '',
        byteOrder: ''
      },
      conFormBleEdit: {
        name: '',
        rescanIntervalSeconds: '',
        checkIntervalSeconds: '',
        scanTimeSeconds: '',
        passiveScanMode: ''
      },
      conFormBacnetEdit: {
        objectName: '',
        address: '',
        objectIdentifier: '',
        maxApduLengthAccepted: '',
        segmentationSupported: '',
        vendorIdentifier: ''
      },
      conFormOpcuaEdit: {
        name: '',
        url: '',
        timeoutInMillis: '',
        scanPeriodInMillis: '',
        disableSubscriptions: '',
        subCheckPeriodInMillis: '',
        showMap: '',
        security: '',
        type: ''
      },
      modbusFormEdit: {
        type: '',
        method: '',
        addr: '',
        port: '',
        timeOut: '',
        byteOrder: '',
        baudrate: ''
      },
      plcFormEdit: {
        type: '',
        method: '',
        addr: '',
        port: '',
        timeOut: '',
        byteOrder: ''
      },

      conFormAddZdy: {
        name: '',
        protocolType: '',
        selfType: '',
        textJson: '',
        enable: ''
      },
      conFormEdit: {
        name: '',
        protocolType: '',
        selfType: '',
        enable: ''
      },
      mqttFormAdd:{
        name: '',
        addr: '',
        port: '',
        clientId:'',
        type: '',
        username: '',
        password: ''
      },
      mqttFormEdit:{
        name: '',
        addr: '',
        port: '',
        clientId:'',
        type: '',
        username: '',
        password: ''
      },
      rpcFormAdd: {
        deviceNameGl: '',
        methodGl: '',
        requestTopic: '',
        responseTopic: '',
        responseCs: '',
        returnExp: ''
      },
      rpcFormEdit: {
        deviceNameGl: '',
        methodGl: '',
        requestTopic: '',
        responseTopic: '',
        responseCs: '',
        returnExp: ''
      },
      conTopicForm: {
        topic: '',
        deviceNamePp: '',
        exp: ''
      },
      conTopicFormEdit: {
        topic: '',
        deviceNamePp: '',
        exp: ''
      },
      disConTopicForm: {
        topic: '',
        deviceNamePp: '',
        exp: ''
      },
      disConTopicFormEdit: {
        topic: '',
        deviceNamePp: '',
        exp: ''
      },
      conFormRequestAdd: {
        host: '',
        SSLVerify: '',
        type: '',
        username: '',
        password: ''
      },
      conFormRequestEdit: {
        host: '',
        SSLVerify: '',
        type: '',
        username: '',
        password: ''
      },
      conFormOdbcAdd: {
        str: '',
        autocommit: '',
        timeout: '',
        encoding: '',
        char: '',
        wchar: '',
        metadata: '',
        reconnect: '',
        reconnectPeriod: '',
        pooling: '',
        poll_Query: '',
        period: '',
        column: '',
        ite_Query: '',
        persistent: '',
      },
      conFormOdbcEdit: {
        str: '',
        autocommit: '',
        timeout: '',
        encoding: '',
        char: '',
        wchar: '',
        metadata: '',
        reconnect: '',
        reconnectPeriod: '',
        pooling: '',
        poll_Query: '',
        period: '',
        column: '',
        ite_Query: '',
        persistent: '',
      },
      conFormRestAdd:{
          host: '',
          port: ''
      },
      conFormRestEdit:{
        host: '',
        port: ''
      },
      conFormSerialAdd: {
        name:''
      },
      conFormSerialEdit:{
        name:''
      },
      conRule: {
        name: [
          { required: true, message: '请输入连接器名称', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        selfType: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        enable: [
          { required: true, message: '请选择是否可用', trigger: 'change' }
        ],
      },
      conRuleEdit: {
        protocolType: [
          { required: true, message: '请选择', trigger: 'change' }
        ],
        selfType: [
          { required: true, message: '请选择', trigger: 'change' }
        ],
        enable: [
          { required: true, message: '请选择', trigger: 'change' }
        ],
      },
      conRuleZdy:{
        name: [
          { required: true, message: '请输入连接器名称', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        selfType: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        protocolType: [
          { required: true, message: '请输入协议', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        textJson: [
          { required: true, message: '请输入json', trigger: 'blur' },
          { min: 2, trigger: 'blur' }
        ],
        enable: [
          { required: true, message: '请选择是否可用', trigger: 'change' }
        ],
      },
      conModbusRule: {
        type: [
          { required: true, message: '请选择类型', trigger: 'change' }
        ],
        method: [
          { required: true, message: '请选择method', trigger: 'change' }
        ],
        addr: [
          { required: true, message: '请输入地址', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        baudrate: [
          { required: true, message: '请输入波特率', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        timeOut: [
          { required: true, message: '请输入超时时间', trigger: 'blur' },
          { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
        ],
        port: [
          { required: true, message: '请输入端口号', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        byteOrder: [
          { required: true, message: '请选择字节顺序', trigger: 'change' }
        ]
      },
      conPlcEditRule: {
        type: [
          { required: true, message: '请选择类型', trigger: 'change' }
        ],
        method: [
          { required: true, message: '请选择method', trigger: 'change' }
        ],
        addr: [
          { required: true, message: '请输入地址', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        timeOut: [
          { required: true, message: '请输入超时时间', trigger: 'blur' },
          { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
        ],
        port: [
          { required: true, message: '请输入端口号', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        byteOrder: [
          { required: true, message: '请选择字节顺序', trigger: 'change' }
        ]
      },
      conPlcRule: {
        type: [
          { required: true, message: '请选择类型', trigger: 'change' }
        ],
        method: [
          { required: true, message: '请选择method', trigger: 'change' }
        ],
        addr: [
          { required: true, message: '请输入地址', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        timeOut: [
          { required: true, message: '请输入超时时间', trigger: 'blur' },
          { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
        ],
        port: [
          { required: true, message: '请输入端口号', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        byteOrder: [
          { required: true, message: '请选择字节顺序', trigger: 'change' }
        ]
      },
      mqttRule: {
        name: [
          { required: true, message: '请输入连接器名称', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        addr: [
          { required: true, message: '请输入地址', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        port: [
          { required: true, message: '请输入端口号', trigger: 'blur' },
          { min: 2, max: 5, message: '长度在 2 到 5 个字符', trigger: 'blur' }
        ],
        clientId: [
          { required: true, message: '请输入客户端ID', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
      },
      rpcRules: {
        deviceNameGl: [
          { required: true, message: '请输入设备名过滤', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        methodGl: [
          { required: true, message: '请输入方法过滤', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        requestTopic: [
          { required: true, message: '请输入请求topic', trigger: 'blur' },
          { min: 2, max: 200, message: '长度在 2 到 200 个字符', trigger: 'blur' }
        ],
        responseTopic: [
          { required: true, message: '请输入响应topic', trigger: 'blur' },
          { min: 2, max: 200, message: '长度在 2 到 200 个字符', trigger: 'blur' }
        ],
        responseCs: [
          { required: true, message: '请输入超时时间', trigger: 'blur' },
          { min: 2, max: 20, message: '长度在 2 到 20 个字符', trigger: 'blur' }
        ],
        returnExp: [
          { required: true, message: '请输入表达式', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ]
      },
      conTopicRules: {
        topic: [
          { required: true, message: '请输入topic', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        deviceNamePp: [
          {required: true, message: '设备名匹配不能为空', trigger: 'change'},
        ],
        exp: [
          { required: true, message: '请输入表达式', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ]
      },
      disConTopicRules: {
        topic: [
          { required: true, message: '请输入topic', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        deviceNamePp: [
          {required: true, message: '设备名匹配不能为空', trigger: 'change'},
        ],
        exp: [
          { required: true, message: '请输入表达式', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ]
      },
      conOpcuaRule: {
        name: [
          { required: true, message: '请输入名称', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        url: [
          { required: true, message: '请输入地址', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        timeoutInMillis: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        scanPeriodInMillis: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        subCheckPeriodInMillis: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        security: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        type: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        disableSubscriptions: [
          { required: true, message: '请选择', trigger: 'change' }
        ],
        showMap: [
          { required: true, message: '请选择', trigger: 'change' }
        ]
      },
      conBleRule: {
        name: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        rescanIntervalSeconds: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        checkIntervalSeconds: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        scanTimeSeconds: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        passiveScanMode: [
          { required: true, message: '请选择', trigger: 'change' }
        ]
      },
      conBacnetRule: {
        objectName: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        address: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        objectIdentifier: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        maxApduLengthAccepted: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        segmentationSupported: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        vendorIdentifier: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
      },
      conRtuRule: {
        name: [
          { required: true, message: '请输入名称', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        type: [
          { required: true, message: '请输入类型', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        method: [
          { required: true, message: '请输入方式', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        port: [
          { required: true, message: '请输入端口', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        baudrate: [
          { required: true, message: '请输入波特率', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        timeout: [
          { required: true, message: '请输入超时时间', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        host: [
          { required: true, message: '请输入地址', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        byteOrder: [
          { required: true, message: '请输入字节顺序', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ]
      },
      conRequestRule: {
        host: [
          { required: true, message: '请输入地址', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        SSLVerify: [
          { required: true, message: '请选择', trigger: 'change' }
        ],
        type: [
          { required: true, message: '请输入类型', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        username: [
          { required: true, message: '请输入用户名', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        password: [
          { required: true, message: '请输入密码', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
      },
      conOdbcRule:{
        str: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        autocommit: [
          { required: true, message: '请选择是否自动自交', trigger: 'change' }
        ],
        timeout: [
          { required: true, message: '请输入超时时间', trigger: 'blur' },
          { min: 2, max: 10, message: '长度在 2 到 10 个字符', trigger: 'blur' }
        ],
        encoding: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        char: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        wchar: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        metadata: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        reconnect: [
          { required: true, message: '请选择是否自动连接', trigger: 'change' }
        ],
        reconnectPeriod: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        pooling: [
          { required: true, message: '请选择', trigger: 'change' }
        ],
        poll_Query: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 200, message: '长度在 2 到 200 个字符', trigger: 'blur' }
        ],
        period: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        column: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ],
        ite_Query: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max: 200, message: '长度在 2 到 200 个字符', trigger: 'blur' }
        ],
        persistent: [
          { required: true, message: '请选择', trigger: 'change' }
        ]
      },
      conRestRule:{
        host: [
          { required: true, message: '请输入地址', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
        port: [
          { required: true, message: '请输入端口号', trigger: 'blur' },
          { min: 2, max: 50, message: '长度在 2 到 50 个字符', trigger: 'blur' }
        ]
      },
      conSerialRule:{
        name: [
          { required: true, message: '请输入名称', trigger: 'blur' },
          { min: 2, max: 100, message: '长度在 2 到 100 个字符', trigger: 'blur' }
        ],
      },
      height:"",
      // 是否加载数据
      loading:true,
      currentPage: 1,
      pageSize: 16,
      total: 0,
      sort: '',
      order: '',
      json: {},
      activeName: 'first',
      conNameSearch: '',
      conType: '',
      textareaJson: '',
      conNameOptions: [],
      conNameArr: [],
      conList: [],
      selfTypeArr: [],
      conTypeArr: [{value:'自定义'},{value:'mqtt'},{value:'modbus'},{value:'mitsubishi'},{value:'opcua'},{value:'ble'},{value:'request'}
        ,{value:'can'},{value:'bacnet'},{value:'odbc'},{value:'rest'},{value:'snmp'},{value:'serial'},{value:'rtu'}],
      conTypeAll: [],
      dialogFormVisibleAdd: false,
      dialogFormVisibleModbusAdd: false,
      dialogFormVisiblePlcAdd : false,
      dialogFormVisibleOpcuaAdd: false,
      dialogFormVisibleModbusEdit: false,
      dialogFormVisiblePlcEdit: false,
      dialogFormVisibleOpcuaEdit: false,
      dialogFormVisibleAddZdy: false,
      dialogFormVisibleEdit: false,
      dialogFormVisibleBleAdd: false,
      dialogFormVisibleBleEdit: false,
      dialogFormVisibleBacnetAdd: false,
      dialogFormVisibleBacnetEdit: false,
      dialogFormVisibleRtuAdd: false,
      dialogFormVisibleRtuEdit: false,
      dialogFormVisibleRequestAdd: false,
      dialogFormVisibleRequestEdit: false,
      dialogFormVisibleOdbcAdd: false,
      dialogFormVisibleOdbcEdit: false,
      dialogFormVisibleRestAdd: false,
      dialogFormVisibleRestEdit: false,
      dialogFormVisibleSerialAdd: false,
      dialogFormVisibleSerialEdit: false
    }
  },
  created() {
    this.selectAllFromCon();
  },

  methods: {
    selectAllFromCon(){
      selectAllFromCon(this.conNameSearch,(this.currentPage-1)*this.pageSize,this.pageSize,this.sort,this.order).then(res => {
        if(res.data.result){
          this.conNameOptions = [];
          this.conTypeAll = [];
          this.selfTypeArr = [];
          this.conNameArr = [];
          this.conList = [];
          let dataArr = res.data.data.data;
          this.total =  res.data.data.count;
          let conType = res.data.data.conType;
          for(let i =0;i<dataArr.length;i++){
            this.conList.push({name:dataArr[i].name,type:dataArr[i].protocol_type,json:dataArr[i].json,selfType:dataArr[i].self_type,enable:dataArr[i].enable});
          }
          for(let i =0; i<conType.length;i++){
            this.conTypeAll.push({value:conType[i]});
          }
          let selfType  = res.data.data.selfType;
          for(let i =0; i<selfType.length;i++){
            this.selfTypeArr.push({value:selfType[i]});
          }
          let conNameList =  res.data.data.conName;
          this.conNameArr = res.data.data.conName;
          for(let i =0; i<conNameList.length;i++){
            this.conNameOptions.push({value:conNameList[i]});
          }
        }else{
          this.$message({
            type: 'success',
            message: '查询失败!'
          });
        }
      })
    },

    addCon(){
      if(this.conType == '自定义'){
        this.dialogFormVisibleAddZdy = true;

      }else if(this.conType != '' && this.conType != null){
        if(this.conType == 'mqtt'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleAdd = true;
        }else if(this.conType == 'modbus'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleModbusAdd = true;
        }else if(this.conType == 'mitsubishi'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisiblePlcAdd = true;
        }else if(this.conType == 'opcua'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleOpcuaAdd = true;
        }else if(this.conType =='ble'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleBleAdd = true;
        }else if(this.conType == 'bacnet'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleBacnetAdd = true;
        }else if(this.conType == 'rtu'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleRtuAdd = true;
        }else if(this.conType == 'request'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleRequestAdd = true;
        }else if(this.conType == 'odbc'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleOdbcAdd = true;
        }else if(this.conType == 'rest'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleRestAdd = true;
        }else if(this.conType == 'serial'){
          this.conFormAdd.protocolType = this.conType;
          this.dialogFormVisibleSerialAdd = true;
        }
      }else{
        this.$message({
          type: 'error',
          message: '请选择类型'
        });
      }
    },

    submitFormAdd(conFormAdd,mqttFormAdd,rpcFormAdd,conTopicForm,disConTopicForm,ConDynamicForm,disConDynamicForm){
      this.$refs[conFormAdd].validate((valid) => {
        if(valid){
          this.$refs[mqttFormAdd].validate((valid) => {
            if(valid){
              this.$refs[rpcFormAdd].validate((valid) => {
                if(valid){
                  this.$refs[conTopicForm].validate((valid) => {
                    if(valid){
                      this.$refs[disConTopicForm].validate((valid) => {
                        if(valid){
                          let conJson = "";
                          let disConJson="";
                          let disConDynamicArr = this.disConDynamicForm.dynamicItem;
                          let conDynamicArr = this.ConDynamicForm.dynamicItem;
                          if(this.conTopicForm.deviceNamePp == 'topic'){
                            conJson+= '{"topicFilter":' + '"'+this.conTopicForm.topic+'",' +
                              '"deviceNameTopicExpression":'+'"'+this.conTopicForm.exp+'"'
                              +'}';
                          }else{
                            conJson+= '{"topicFilter":' + '"'+this.conTopicForm.topic+'",' +
                              '"deviceNameJsonExpression":'+'"'+this.conTopicForm.exp+'"'
                              +'}';
                          }
                          if(this.disConTopicForm.deviceNamePp == 'topic'){
                            disConJson+= '{"topicFilter":' + '"'+this.disConTopicForm.topic+'",' +
                              '"deviceNameTopicExpression":'+'"'+this.disConTopicForm.exp+'"'
                              +'}';
                          }else{
                            disConJson+= '{"topicFilter":' + '"'+this.disConTopicForm.topic+'",' +
                              '"deviceNameJsonExpression":'+'"'+this.disConTopicForm.exp+'"'
                              +'}';
                          }
                          for(let i=0; i<disConDynamicArr.length;i++){
                            if(disConDynamicArr[i].deviceNamePp == 'topic'){
                              if(i==disConDynamicArr.length-1){
                                disConJson+= '{"topicFilter":' + '"'+disConDynamicArr[i].topic+'",' +
                                  '"deviceNameTopicExpression":'+'"'+disConDynamicArr[i].exp+'"'
                                  +'}';
                              }else {
                                disConJson += '{"topicFilter":' + '"' + disConDynamicArr[i].topic + '",' +
                                  '"deviceNameTopicExpression":' + '"' + disConDynamicArr[i].exp+'"'
                                  + '},'
                              }
                            }else{
                              if(i==disConDynamicArr.length-1){
                                disConJson+= '{"topicFilter":' + '"'+disConDynamicArr[i].topic+'",' +
                                  '"deviceNameJsonExpression":'+'"'+disConDynamicArr[i].exp+'"'
                                  +'}';
                              }else {
                                disConJson += '{"topicFilter":' + '"' + disConDynamicArr[i].topic + '",' +
                                  '"deviceNameJsonExpression":' + '"' + disConDynamicArr[i].exp+'"'
                                  + '},'
                              }
                            }
                          }
                          for(let i=0; i<conDynamicArr.length;i++){
                            if(conDynamicArr[i].deviceNamePp == 'topic'){
                              if(i==conDynamicArr.length-1){
                                conJson+= '{"topicFilter":' + '"'+conDynamicArr[i].topic+'",' +
                                  '"deviceNameTopicExpression":'+'"'+conDynamicArr[i].exp+'"'
                                  +'}';
                              }else {
                                conJson += '{"topicFilter":' + '"' + conDynamicArr[i].topic + '",' +
                                  '"deviceNameTopicExpression":' + '"' + conDynamicArr[i].exp+'"'
                                  + '},'
                              }
                            }else{
                              if(i==conDynamicArr.length-1){
                                conJson+= '{"topicFilter":' + '"'+conDynamicArr[i].topic+'",' +
                                  '"deviceNameJsonExpression":'+'"'+conDynamicArr[i].exp+'"'
                                  +'}';
                              }else {
                                conJson += '{"topicFilter":' + '"' + conDynamicArr[i].topic + '",' +
                                  '"deviceNameJsonExpression":' + '"' + conDynamicArr[i].exp+'"'
                                  + '},'
                              }
                            }
                          }
                          if(disConDynamicArr.length > 0 && conDynamicArr.length > 0){
                            this.$refs[disConDynamicForm].validate((valid) => {
                              if(valid){
                                this.$refs[ConDynamicForm].validate((valid) => {
                                  if (valid) {
                                    this.$confirm('确定添加吗?', '提示', {
                                      confirmButtonText: '确定',
                                      cancelButtonText: '取消',
                                      type: 'warning'
                                    }).then(() => {
                                      let con = {};
                                      con.name = this.conFormAdd.name;
                                      con.protocol_type = this.conFormAdd.protocolType;
                                      con.self_type = this.conFormAdd.selfType;
                                      con.enable = this.conFormAdd.enable=="是"?1:0;
                                      con.json ='{"broker":{'+
                                        '"name":'+'"'+this.mqttFormAdd.name+'",'+
                                        '"host":'+'"'+this.mqttFormAdd.addr+'",'+
                                        '"port":'+this.mqttFormAdd.port+','+
                                        '"clientId":'+'"'+this.mqttFormAdd.clientId+'",'+
                                        '"security":{'+
                                        '"type":'+ '"'+this.mqttFormAdd.type+'",'+
                                        '"username":'+ '"'+this.mqttFormAdd.username+'",'+
                                        '"password":'+ '"'+this.mqttFormAdd.password+'"'+
                                        '}'+
                                        '},'+
                                        '"connectRequests":['+conJson
                                        +'],'+
                                        '"disconnectRequests":['+disConJson
                                        +'],'+
                                        '"serverSideRpc":[{'+
                                        '"deviceNameFilter":'+'"'+this.rpcFormAdd.deviceNameGl + '",'+
                                        '"methodFilter":'+'"'+this.rpcFormAdd.methodGl + '",'+
                                        '"requestTopicExpression":'+'"'+this.rpcFormAdd.requestTopic + '",'+
                                        '"responseTopicExpression":'+'"'+this.rpcFormAdd.responseTopic + '",'+
                                        '"responseTimeout":'+this.rpcFormAdd.responseCs + '",'+
                                        '"valueExpression":'+'"'+this.rpcFormAdd.returnExp + '"'+
                                        '}]'+
                                        '}';
                                      if(this.conNameArr.indexOf(con.name) == -1){
                                        addCon(con).then(res=>{
                                          if(res.data.result){
                                            this.$refs[conFormAdd].resetFields();
                                            this.$refs[mqttFormAdd].resetFields();
                                            this.$refs[rpcFormAdd].resetFields();
                                            this.$refs[conTopicForm].resetFields();
                                            this.$refs[disConTopicForm].resetFields();
                                            if(this.ConDynamicForm.dynamicItem.length>0){
                                              this.$refs[ConDynamicForm].resetFields();
                                            }
                                            if(this.disConDynamicForm.dynamicItem.length>0){
                                              this.$refs[disConDynamicForm].resetFields();
                                            }
                                            this.dialogFormVisibleAdd = false;
                                            this.$message({
                                              type: 'success',
                                              message: '添加成功!'
                                            });
                                            this.selectAllFromCon();
                                          }else{
                                            this.$message({
                                              type: 'error',
                                              message: '添加失败!'
                                            });
                                          }
                                        })
                                      }else{
                                        this.$message({
                                          type: 'error',
                                          message: '连接器名称已存在!'
                                        });
                                      }
                                    })
                                  }
                                })
                              }
                            })
                          }else if(conDynamicArr.length > 0 && disConDynamicArr.length == 0){
                            this.$refs[ConDynamicForm].validate((valid) => {
                              if (valid) {
                                this.$confirm('确定添加吗?', '提示', {
                                  confirmButtonText: '确定',
                                  cancelButtonText: '取消',
                                  type: 'warning'
                                }).then(() => {
                                  let con = {};
                                  con.name = this.conFormAdd.name;
                                  con.protocol_type = this.conFormAdd.protocolType;
                                  con.self_type = this.conFormAdd.selfType;
                                  con.enable = this.conFormAdd.enable=="是"?1:0;
                                  con.json ='{"broker":{'+
                                    '"name":'+'"'+this.mqttFormAdd.name+'",'+
                                    '"host":'+'"'+this.mqttFormAdd.addr+'",'+
                                    '"port":'+this.mqttFormAdd.port+','+
                                    '"clientId":'+'"'+this.mqttFormAdd.clientId+'",'+
                                    '"security":{'+
                                    '"type":'+ '"'+this.mqttFormAdd.type+'",'+
                                    '"username":'+ '"'+this.mqttFormAdd.username+'",'+
                                    '"password":'+ '"'+this.mqttFormAdd.password+'"'+
                                    '}'+
                                    '},'+
                                    '"connectRequests":['+conJson
                                    +'],'+
                                    '"disconnectRequests":['+disConJson
                                    +'],'+
                                    '"serverSideRpc":[{'+
                                    '"deviceNameFilter":'+'"'+this.rpcFormAdd.deviceNameGl + '",'+
                                    '"methodFilter":'+'"'+this.rpcFormAdd.methodGl + '",'+
                                    '"requestTopicExpression":'+'"'+this.rpcFormAdd.requestTopic + '",'+
                                    '"responseTopicExpression":'+'"'+this.rpcFormAdd.responseTopic + '",'+
                                    '"responseTimeout":'+this.rpcFormAdd.responseCs + '",'+
                                    '"valueExpression":'+'"'+this.rpcFormAdd.returnExp + '"'+
                                    '}]'+
                                    '}';
                                  if(this.conNameArr.indexOf(con.name) == -1){
                                    addCon(con).then(res=>{
                                      if(res.data.result){
                                        this.$refs[conFormAdd].resetFields();
                                        this.$refs[mqttFormAdd].resetFields();
                                        this.$refs[rpcFormAdd].resetFields();
                                        this.$refs[conTopicForm].resetFields();
                                        this.$refs[disConTopicForm].resetFields();
                                        if(this.ConDynamicForm.dynamicItem.length>0){
                                          this.$refs[ConDynamicForm].resetFields();
                                        }
                                        if(this.disConDynamicForm.dynamicItem.length>0){
                                          this.$refs[disConDynamicForm].resetFields();
                                        }
                                        this.dialogFormVisibleAdd = false;
                                        this.$message({
                                          type: 'success',
                                          message: '添加成功!'
                                        });
                                        this.selectAllFromCon();
                                      }else{
                                        this.$message({
                                          type: 'error',
                                          message: '添加失败!'
                                        });
                                      }
                                    })
                                  }else{
                                    this.$message({
                                      type: 'error',
                                      message: '连接器名称已存在!'
                                    });
                                  }
                                })
                              }
                            })
                          }else if(conDynamicArr.length == 0 && disConDynamicArr.length >0){
                            this.$refs[disConDynamicForm].validate((valid) => {
                              if (valid) {
                                this.$confirm('确定添加吗?', '提示', {
                                  confirmButtonText: '确定',
                                  cancelButtonText: '取消',
                                  type: 'warning'
                                }).then(() => {
                                  let con = {};
                                  con.name = this.conFormAdd.name;
                                  con.protocol_type = this.conFormAdd.protocolType;
                                  con.self_type = this.conFormAdd.selfType;
                                  con.enable = this.conFormAdd.enable=="是"?1:0;
                                  con.json ='{"broker":{'+
                                    '"name":'+'"'+this.mqttFormAdd.name+'",'+
                                    '"host":'+'"'+this.mqttFormAdd.addr+'",'+
                                    '"port":'+this.mqttFormAdd.port+','+
                                    '"clientId":'+'"'+this.mqttFormAdd.clientId+'",'+
                                    '"security":{'+
                                    '"type":'+ '"'+this.mqttFormAdd.type+'",'+
                                    '"username":'+ '"'+this.mqttFormAdd.username+'",'+
                                    '"password":'+ '"'+this.mqttFormAdd.password+'"'+
                                    '}'+
                                    '},'+
                                    '"connectRequests":['+conJson
                                    +'],'+
                                    '"disconnectRequests":['+disConJson
                                    +'],'+
                                    '"serverSideRpc":[{'+
                                    '"deviceNameFilter":'+'"'+this.rpcFormAdd.deviceNameGl + '",'+
                                    '"methodFilter":'+'"'+this.rpcFormAdd.methodGl + '",'+
                                    '"requestTopicExpression":'+'"'+this.rpcFormAdd.requestTopic + '",'+
                                    '"responseTopicExpression":'+'"'+this.rpcFormAdd.responseTopic + '",'+
                                    '"responseTimeout":'+this.rpcFormAdd.responseCs + '",'+
                                    '"valueExpression":'+'"'+this.rpcFormAdd.returnExp + '"'+
                                    '}]'+
                                    '}';
                                  if(this.conNameArr.indexOf(con.name) == -1) {
                                    addCon(con).then(res => {
                                      if (res.data.result) {
                                        this.$refs[conFormAdd].resetFields();
                                        this.$refs[mqttFormAdd].resetFields();
                                        this.$refs[rpcFormAdd].resetFields();
                                        this.$refs[conTopicForm].resetFields();
                                        this.$refs[disConTopicForm].resetFields();
                                        if (this.ConDynamicForm.dynamicItem.length > 0) {
                                          this.$refs[ConDynamicForm].resetFields();
                                        }
                                        if (this.disConDynamicForm.dynamicItem.length > 0) {
                                          this.$refs[disConDynamicForm].resetFields();
                                        }
                                        this.dialogFormVisibleAdd = false;
                                        this.$message({
                                          type: 'success',
                                          message: '添加成功!'
                                        });
                                        this.selectAllFromCon();
                                      } else {
                                        this.$message({
                                          type: 'error',
                                          message: '添加失败!'
                                        });
                                      }
                                    })
                                  }else{
                                    this.$message({
                                      type: 'error',
                                      message: '连接器名称已存在!'
                                    });
                                  }
                                })
                              }
                            })
                          }else {
                            let con = {};
                            con.name = this.conFormAdd.name;
                            con.protocol_type = this.conFormAdd.protocolType;
                            con.self_type = this.conFormAdd.selfType;
                            con.enable = this.conFormAdd.enable=="是"?1:0;
                            con.json ='{"broker":{'+
                              '"name":'+'"'+this.mqttFormAdd.name+'",'+
                              '"host":'+'"'+this.mqttFormAdd.addr+'",'+
                              '"port":'+this.mqttFormAdd.port+','+
                              '"clientId":'+'"'+this.mqttFormAdd.clientId+'",'+
                              '"security":{'+
                              '"type":'+ '"'+this.mqttFormAdd.type+'",'+
                              '"username":'+ '"'+this.mqttFormAdd.username+'",'+
                              '"password":'+ '"'+this.mqttFormAdd.password+'"'+
                              '}'+
                              '},'+
                              '"connectRequests":['+conJson
                              +'],'+
                              '"disconnectRequests":['+disConJson
                              +'],'+
                              '"serverSideRpc":[{'+
                              '"deviceNameFilter":'+'"'+this.rpcFormAdd.deviceNameGl + '",'+
                              '"methodFilter":'+'"'+this.rpcFormAdd.methodGl + '",'+
                              '"requestTopicExpression":'+'"'+this.rpcFormAdd.requestTopic + '",'+
                              '"responseTopicExpression":'+'"'+this.rpcFormAdd.responseTopic + '",'+
                              '"responseTimeout":'+this.rpcFormAdd.responseCs + ','+
                              '"valueExpression":'+'"'+this.rpcFormAdd.returnExp + '"'+
                              '}]'+
                              '}';
                              this.$confirm('确定添加吗?', '提示', {
                                confirmButtonText: '确定',
                                cancelButtonText: '取消',
                                type: 'warning'
                              }).then(() => {
                                if(this.conNameArr.indexOf(con.name) == -1) {
                                  addCon(con).then(res => {
                                    if (res.data.result) {
                                      this.$refs[conFormAdd].resetFields();
                                      this.$refs[mqttFormAdd].resetFields();
                                      this.$refs[rpcFormAdd].resetFields();
                                      this.$refs[conTopicForm].resetFields();
                                      this.$refs[disConTopicForm].resetFields();
                                      if (this.ConDynamicForm.dynamicItem.length > 0) {
                                        this.$refs[ConDynamicForm].resetFields();
                                      }
                                      if (this.disConDynamicForm.dynamicItem.length > 0) {
                                        this.$refs[disConDynamicForm].resetFields();
                                      }
                                      this.dialogFormVisibleAdd = false;
                                      this.$message({
                                        type: 'success',
                                        message: '添加成功!'
                                      });
                                      this.selectAllFromCon();
                                    } else {
                                      this.$message({
                                        type: 'error',
                                        message: '添加失败!'
                                      });
                                    }
                                  })
                                }else{
                                  this.$message({
                                    type: 'error',
                                    message: '连接器名称已存在!'
                                  });
                                }
                              })
                          }
                        }
                      })
                    }
                  })
                }
              })
            }
          })
        }
      })
    },

    submitFormModbusAdd(conFormAdd,conFormModbusAdd){
      this.$refs[conFormAdd].validate((valid) => {
        if(valid){
          this.$refs[conFormModbusAdd].validate((valid) => {
              if(valid){
                this.$confirm('确定添加吗?', '提示', {
                  confirmButtonText: '确定',
                  cancelButtonText: '取消',
                  type: 'warning'
                }).then(() => {
                  let conName = this.conNameArr;
                  if (conName.indexOf(this.conFormAdd.name) == -1) {
                    let con = {};
                    con.name = this.conFormAdd.name;
                    con.enable = this.conFormAdd.enable =="是"?1:0
                    con.protocol_type = this.conFormAdd.protocolType;
                    con.self_type = this.conFormAdd.selfType;
                    con.json = '{"server":{'+'"type":'+'"' + this.conFormModbusAdd.type+'",'
                      + '"host":'+ '"' + this.conFormModbusAdd.addr + '",'
                      + '"port":'+this.conFormModbusAdd.port+','
                      + '"timeout":' + this.conFormModbusAdd.timeOut+','
                      + '"method":' + '"'+ this.conFormModbusAdd.method + '",'
                      +'"byteOrder":' + '"' + this.conFormModbusAdd.byteOrder + '",'
                      +'"baudrate":' + this.conFormModbusAdd.baudrate
                      + '}}';
                    addCon(con).then(res=>{
                      if(res.data.result){
                        this.$refs[conFormAdd].resetFields();
                        this.$refs[conFormModbusAdd].resetFields();
                        this.dialogFormVisibleModbusAdd = false;
                        this.$message({
                          type: 'success',
                          message: '添加成功!'
                        });
                        this.selectAllFromCon();
                      }else{
                        this.$message({
                          type: 'error',
                          message: '添加失败!'
                        });
                      }
                    })
                  }else {
                    this.$message({
                      type: 'warning',
                      message: '连接器名称已存在'
                    });
                  }
                })
              }
          })
        }
      })
    },
    submitFormPlcAdd(conFormAdd,conFormPlcAdd){
      this.$refs[conFormAdd].validate((valid) => {
        if(valid){
          this.$refs[conFormPlcAdd].validate((valid) => {
            if(valid){
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable =="是"?1:0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  con.json = '{"server":{'+'"type":'+'"' + this.conFormPlcAdd.type+'",'
                    + '"host":'+ '"' + this.conFormPlcAdd.addr + '",'
                    + '"port":'+this.conFormPlcAdd.port+','
                    + '"timeout":' + this.conFormPlcAdd.timeOut+','
                    + '"method":' + '"'+ this.conFormPlcAdd.method + '",'
                    +'"byteOrder":' + '"' + this.conFormPlcAdd.byteOrder+'"'
                    + '}}';
                  addCon(con).then(res=>{
                    if(res.data.result){
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormPlcAdd].resetFields();
                      this.dialogFormVisiblePlcAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      //this.selectAllFromCon();
                    }else{
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                  this.selectAllFromCon();
                }else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },

    submitFormOpcuaAdd(conFormAdd,conFormOpcuaAdd){
      this.$refs[conFormAdd].validate((valid) => {
        if(valid){
          this.$refs[conFormOpcuaAdd].validate((valid) => {
            if(valid){
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable =="是"?1:0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  this.conFormOpcuaAdd.showMap = this.conFormOpcuaAdd.showMap =="是"?true:false;
                  this.conFormOpcuaAdd.disableSubscriptions = this.conFormOpcuaAdd.disableSubscriptions=="是"? true:false;
                  con.json = '{"server":{'+'"name":'+'"' + this.conFormOpcuaAdd.name+'",'
                    + '"url":'+ '"' + this.conFormOpcuaAdd.url + '",'
                    + '"timeoutInMillis":'+this.conFormOpcuaAdd.timeoutInMillis+','
                    + '"scanPeriodInMillis":' + this.conFormOpcuaAdd.scanPeriodInMillis+','
                    + '"disableSubscriptions":' + this.conFormOpcuaAdd.disableSubscriptions+','
                    + '"subCheckPeriodInMillis":' + this.conFormOpcuaAdd.subCheckPeriodInMillis+','
                    + '"showMap":' + this.conFormOpcuaAdd.showMap+','
                    + '"security":' + '"'+ this.conFormOpcuaAdd.security + '",'
                    +'"identity":' + '{"type":' + '"' + this.conFormOpcuaAdd.type+'"'+ '}'
                    + '}}';
                  addCon(con).then(res=>{
                    if(res.data.result){
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormOpcuaAdd].resetFields();
                      this.dialogFormVisibleOpcuaAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      this.selectAllFromCon();
                    }else{
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                }else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },

    submitFormBleAdd(conFormAdd,conFormBleAdd){
      this.$refs[conFormAdd].validate((valid) => {
        if(valid){
          this.$refs[conFormBleAdd].validate((valid) => {
            if(valid){
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable =="是"?1:0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  this.conFormBleAdd.passiveScanMode = this.conFormBleAdd.passiveScanMode =="是"?true:false;
                  con.json = '{"name":'+'"' + this.conFormBleAdd.name+'",'
                    + '"rescanIntervalSeconds":' + this.conFormBleAdd.rescanIntervalSeconds + ','
                    + '"checkIntervalSeconds":'+this.conFormBleAdd.checkIntervalSeconds+','
                    + '"scanTimeSeconds":' + this.conFormBleAdd.scanTimeSeconds+','
                    + '"passiveScanMode":' + this.conFormBleAdd.passiveScanMode
                    + '}';
                  addCon(con).then(res=>{
                    if(res.data.result){
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormBleAdd].resetFields();
                      this.dialogFormVisibleBleAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      this.selectAllFromCon();
                    }else{
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                }else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },
    submitFormBacnetAdd(conFormAdd,conFormBacnetAdd){
      this.$refs[conFormAdd].validate((valid) => {
        if(valid){
          this.$refs[conFormBacnetAdd].validate((valid) => {
            if(valid){
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable =="是"?1:0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  con.json = '{"general":{'+'"objectName":"' + this.conFormBacnetAdd.objectName+'",'
                    + '"address":"' + this.conFormBacnetAdd.address + '",'
                    + '"objectIdentifier":'+this.conFormBacnetAdd.objectIdentifier+','
                    + '"maxApduLengthAccepted":' + this.conFormBacnetAdd.maxApduLengthAccepted+','
                    + '"segmentationSupported":"' + this.conFormBacnetAdd.segmentationSupported+'",'
                    + '"vendorIdentifier":' + this.conFormBacnetAdd.vendorIdentifier+''
                    + '}}';
                  addCon(con).then(res=>{
                    if(res.data.result){
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormBacnetAdd].resetFields();
                      this.dialogFormVisibleBacnetAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      this.selectAllFromCon();
                    }else{
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                }else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },
    submitFormRtuAdd(conFormAdd,conFormRtuAdd){
      this.$refs[conFormAdd].validate((valid) => {
        if(valid){
          this.$refs[conFormRtuAdd].validate((valid) => {
            if(valid){
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable =="是"?1:0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  con.json = '{"server":{'+'"name":"' + this.conFormRtuAdd.name+'",'
                    + '"type":"' + this.conFormRtuAdd.type + '",'
                    + '"method":"'+this.conFormRtuAdd.method+'",'
                    + '"port":"' + this.conFormRtuAdd.port+'",'
                    + '"baudrate":' + this.conFormRtuAdd.baudrate+','
                    + '"timeout":' + this.conFormRtuAdd.timeout+','
                    + '"host":"' + this.conFormRtuAdd.host+'",'
                    + '"byteOrder":"' + this.conFormRtuAdd.byteOrder+'"'
                    + '}}';
                  addCon(con).then(res=>{
                    if(res.data.result){
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormRtuAdd].resetFields();
                      this.dialogFormVisibleRtuAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      this.selectAllFromCon();
                    }else{
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                }else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },
    submitFormRequestAdd(conFormAdd,conFormRequestAdd) {
      this.$refs[conFormAdd].validate((valid) => {
        if (valid) {
          this.$refs[conFormRequestAdd].validate((valid) => {
            if (valid) {
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable == "是" ? 1 : 0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  this.conFormRequestAdd.SSLVerify = this.conFormRequestAdd.SSLVerify=='是'?true:false
                  con.json = '{"host":"' + this.conFormRequestAdd.host + '",'
                    + '"SSLVerify":' + this.conFormRequestAdd.SSLVerify+ ','
                    + '"security":{'+'"type":"' + this.conFormRequestAdd.type + '",'
                    + '"username":"' + this.conFormRequestAdd.username + '",'
                    + '"password":"' + this.conFormRequestAdd.password + '"'
                    + '}}';
                  addCon(con).then(res => {
                    if (res.data.result) {
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormRequestAdd].resetFields();
                      this.dialogFormVisibleRequestAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      this.selectAllFromCon();
                    } else {
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                } else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },

    submitFormOdbcAdd(conFormAdd,conFormOdbcAdd) {
      this.$refs[conFormAdd].validate((valid) => {
        if (valid) {
          this.$refs[conFormOdbcAdd].validate((valid) => {
            if (valid) {
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable == "是" ? 1 : 0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  this.conFormOdbcAdd.autocommit = this.conFormRequestAdd.autocommit=='是'?true:false;
                  this.conFormOdbcAdd.reconnect = this.conFormRequestAdd.reconnect=='是'?true:false;
                  this.conFormOdbcAdd.pooling = this.conFormRequestAdd.pooling=='是'?true:false;
                  this.conFormOdbcAdd.persistent = this.conFormRequestAdd.persistent=='是'?true:false;
                  con.json = '{"connection":{'+'"str":"' + this.conFormOdbcAdd.str + '",'
                    + '"attributes":{'+'"autocommit":' + this.conFormOdbcAdd.autocommit+ ','
                    + '"timeout":' + this.conFormOdbcAdd.timeout + '},'
                    + '"encoding":"' + this.conFormOdbcAdd.encoding + '",'
                    + '"decoding":{' + '"char":"' + this.conFormOdbcAdd.char + '",'
                    + '"wchar":"' +  this.conFormOdbcAdd.wchar + '",'
                    + '"metadata":"' +  this.conFormOdbcAdd.metadata + '"},'
                    + '"reconnect":' +  this.conFormOdbcAdd.reconnect + ','
                    + '"reconnectPeriod":' +  this.conFormOdbcAdd.reconnectPeriod + '},'
                    + '"pyodbc":{' + '"pooling":'+ this.conFormOdbcAdd.pooling + '},'
                    + '"polling":{' + '"query":"' + this.conFormOdbcAdd.poll_Query+'",'
                    + '"period":' +  this.conFormOdbcAdd.period+','
                    + '"iterator":{' + '"column":"' + this.conFormOdbcAdd.column+ '",'
                    + '"query":"' + this.conFormOdbcAdd.ite_Query + '",'
                    + '"persistent":' + this.conFormOdbcAdd.persistent
                    + '}}}';
                  addCon(con).then(res => {
                    if (res.data.result) {
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormOdbcAdd].resetFields();
                      this.dialogFormVisibleOdbcAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      this.selectAllFromCon();
                    } else {
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                } else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },
    submitFormRestAdd(conFormAdd,conFormRestAdd) {
      this.$refs[conFormAdd].validate((valid) => {
        if (valid) {
          this.$refs[conFormRestAdd].validate((valid) => {
            if (valid) {
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable == "是" ? 1 : 0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  con.json = '{"host":"' + this.conFormRestAdd.host + '",'
                    + '"port":' + this.conFormRestAdd.port
                    + '}';
                  addCon(con).then(res => {
                    if (res.data.result) {
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormRestAdd].resetFields();
                      this.dialogFormVisibleRestAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      this.selectAllFromCon();
                    } else {
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                } else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },
    submitFormSerialAdd(conFormAdd,conFormSerialAdd) {
      this.$refs[conFormAdd].validate((valid) => {
        if (valid) {
          this.$refs[conFormSerialAdd].validate((valid) => {
            if (valid) {
              this.$confirm('确定添加吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                if (this.conNameArr.indexOf(this.conFormAdd.name) == -1) {
                  let con = {};
                  con.name = this.conFormAdd.name;
                  con.enable = this.conFormAdd.enable == "是" ? 1 : 0
                  con.protocol_type = this.conFormAdd.protocolType;
                  con.self_type = this.conFormAdd.selfType;
                  con.json = '{"name":"' + this.conFormSerialAdd.name + '"'
                    + '}';
                  addCon(con).then(res => {
                    if (res.data.result) {
                      this.$refs[conFormAdd].resetFields();
                      this.$refs[conFormSerialAdd].resetFields();
                      this.dialogFormVisibleSerialAdd = false;
                      this.$message({
                        type: 'success',
                        message: '添加成功!'
                      });
                      this.selectAllFromCon();
                    } else {
                      this.$message({
                        type: 'error',
                        message: '添加失败!'
                      });
                    }
                  })
                } else {
                  this.$message({
                    type: 'warning',
                    message: '连接器名称已存在'
                  });
                }
              })
            }
          })
        }
      })
    },

    submitFormAddZdy(conFormAddZdy){
      this.$refs[conFormAddZdy].validate((valid) => {
        if(valid){
           if(this.isJSON(this.conFormAddZdy.textJson)) {
             let con = {};
             con.name = this.conFormAddZdy.name;
             con.protocol_type = this.conFormAddZdy.protocolType;
             con.self_type = this.conFormAddZdy.selfType;
             con.json = this.conFormAddZdy.textJson;
             con.enable = this.conFormAddZdy.enable == "是" ?1:0
             if (this.conNameArr.indexOf(this.conFormAddZdy.name) == -1) {
               addCon(con).then(res => {
                 if (res.data.result) {
                   this.$refs[conFormAddZdy].resetFields();
                   this.dialogFormVisibleAddZdy = false;
                   this.$message({
                     type: 'success',
                     message: '添加成功!'
                   });
                   this.selectAllFromCon();
                 } else {
                   this.$message({
                     type: 'error',
                     message: '添加失败'
                   });
                 }
               })
             } else {
               this.$message({
                 type: 'warning',
                 message: '连接器名称已存在'
               });
             }
           }else{
             this.$message({
               type: 'error',
               message: '请输入正确的json格式'
             });
           }
        }
      })
      },
// 判断是否为json格式
    isJSON(str) {
      if (typeof str == 'string') {
        try {
          var obj = JSON.parse(str);
          if (typeof obj == 'object' && obj) {
            return true;
          } else {
            return false;
          }

        } catch (e) {
          console.log('error：' + str + '!!!' + e);
          return false;
        }
      }
    },
    handleEdit(row){
      this.json = '';
      this.json = JSON.parse(row.json);
      if(row.type == 'mqtt'){
        this.dialogFormVisibleEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.mqttFormEdit.name = this.json.broker.name;
        this.mqttFormEdit.addr = this.json.broker.host;
        this.mqttFormEdit.port = this.json.broker.port+"";
        this.mqttFormEdit.clientId = this.json.broker.clientId;
        this.mqttFormEdit.type = this.json.broker.security.type;
        this.mqttFormEdit.username = this.json.broker.security.username;
        this.mqttFormEdit.password = this.json.broker.security.password;
        this.rpcFormEdit.deviceNameGl = this.json.serverSideRpc[0].deviceNameFilter;
        this.rpcFormEdit.methodGl = this.json.serverSideRpc[0].methodFilter;
        this.rpcFormEdit.requestTopic = this.json.serverSideRpc[0].requestTopicExpression;
        this.rpcFormEdit.responseTopic = this.json.serverSideRpc[0].responseTopicExpression;
        this.rpcFormEdit.responseCs = this.json.serverSideRpc[0].responseTimeout+"";
        this.rpcFormEdit.returnExp = this.json.serverSideRpc[0].valueExpression;
        let conReq = this.json.connectRequests;
        this.conTopicFormEdit.topic = conReq[0].topicFilter;
        if(conReq[0].deviceNameTopicExpression != undefined){
          this.conTopicFormEdit.deviceNamePp = "topic";
          this.conTopicFormEdit.exp = conReq[0].deviceNameTopicExpression;
        }else{
          this.conTopicFormEdit.deviceNamePp = "json";
          this.conTopicFormEdit.exp = conReq[0].deviceNameJsonExpression;
        }
        if(conReq.length >1) {
          conReq.shift();
          let dynamicReq = conReq;
          this.ConDynamicFormEdit.dynamicItem = [];
          for (let i = 0; i < dynamicReq.length; i++) {
            if (dynamicReq[i].deviceNameTopicExpression != undefined) {
              this.ConDynamicFormEdit.dynamicItem.push({
                topic: dynamicReq[i].topicFilter,
                deviceNamePp: "topic",
                exp: dynamicReq[i].deviceNameTopicExpression
              });
            } else {
              this.ConDynamicFormEdit.dynamicItem.push({
                topic: dynamicReq[i].topicFilter,
                deviceNamePp: "json",
                exp: dynamicReq[i].deviceNameJsonExpression
              });
            }
          }
        }
        let disConReq = this.json.disconnectRequests;
        this.disConTopicFormEdit.topic = disConReq[0].topicFilter;
        if(disConReq[0].deviceNameTopicExpression != undefined){
          this.disConTopicFormEdit.deviceNamePp = "topic";
          this.disConTopicFormEdit.exp = disConReq[0].deviceNameTopicExpression;
        }else{
          this.disConTopicFormEdit.deviceNamePp = "json";
          this.disConTopicFormEdit.exp = disConReq[0].deviceNameJsonExpression;
        }
        if(disConReq.length >1){
          disConReq.shift();
          let dynamicReqDisCon = disConReq;
          this.disConDynamicFormEdit.dynamicItem = [];
          for(let i=0;i<dynamicReqDisCon.length;i++){
            if(dynamicReqDisCon[i].deviceNameTopicExpression != undefined){
              this.disConDynamicFormEdit.dynamicItem.push({topic:dynamicReqDisCon[i].topicFilter,deviceNamePp:"topic",exp:dynamicReqDisCon[i].deviceNameTopicExpression});
            }else{
              this.disConDynamicFormEdit.dynamicItem.push({topic:dynamicReqDisCon[i].topicFilter,deviceNamePp:"json",exp:dynamicReqDisCon[i].deviceNameJsonExpression});
            }
          }
        }
      } else if(row.type == 'modbus'){
        this.dialogFormVisibleModbusEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.modbusFormEdit.type = this.json.server.type;
        this.modbusFormEdit.addr = this.json.server.host;
        this.modbusFormEdit.port = this.json.server.port+'';
        this.modbusFormEdit.timeOut = this.json.server.timeout+'';
        this.modbusFormEdit.method = this.json.server.method;
        this.modbusFormEdit.byteOrder = this.json.server.byteOrder;
        this.modbusFormEdit.baudrate = this.json.server.baudrate+'';
      }else if(row.type == 'mitsubishi'){
        this.dialogFormVisiblePlcEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.plcFormEdit.type = this.json.server.type;
        this.plcFormEdit.addr = this.json.server.host;
        this.plcFormEdit.port = this.json.server.port+'';
        this.plcFormEdit.timeOut = this.json.server.timeout+'';
        this.plcFormEdit.method = this.json.server.method;
        this.plcFormEdit.byteOrder = this.json.server.byteOrder;
      }else if(row.type == 'opcua'){
          this.dialogFormVisibleOpcuaEdit = true;
          this.conFormEdit.name = row.name;
          this.conFormEdit.protocolType = row.type;
          this.conFormEdit.selfType = row.selfType;
          this.conFormEdit.enable = row.enable==1?'是':'否'
          this.json = '';
          this.json = JSON.parse(row.json);
          this.conFormOpcuaEdit.name = this.json.server.name;
          this.conFormOpcuaEdit.url = this.json.server.url;
          this.conFormOpcuaEdit.timeoutInMillis = this.json.server.timeoutInMillis+'';
          this.conFormOpcuaEdit.scanPeriodInMillis = this.json.server.scanPeriodInMillis+'';
          this.conFormOpcuaEdit.disableSubscriptions = this.json.server.disableSubscriptions == true?'是':'否';
          this.conFormOpcuaEdit.subCheckPeriodInMillis = this.json.server.subCheckPeriodInMillis+'';
          this.conFormOpcuaEdit.showMap = this.json.server.showMap ==true ? '是':'否';
          this.conFormOpcuaEdit.security = this.json.server.security+'';
          this.conFormOpcuaEdit.type = this.json.server.identity.type+'';
      }else if(row.type == 'ble'){
        this.dialogFormVisibleBleEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.conFormBleEdit.name = this.json.name;
        this.conFormBleEdit.rescanIntervalSeconds = this.json.rescanIntervalSeconds+'';
        this.conFormBleEdit.checkIntervalSeconds = this.json.checkIntervalSeconds+'';
        this.conFormBleEdit.scanTimeSeconds = this.json.scanTimeSeconds+'';
        this.conFormBleEdit.passiveScanMode = this.json.passiveScanMode==true?'是':'否';
      }else if(row.type == 'bacnet'){
        this.dialogFormVisibleBacnetEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.conFormBacnetEdit.objectName = this.json.general.objectName;
        this.conFormBacnetEdit.address = this.json.general.address+'';
        this.conFormBacnetEdit.objectIdentifier = this.json.general.objectIdentifier+'';
        this.conFormBacnetEdit.maxApduLengthAccepted = this.json.general.maxApduLengthAccepted+'';
        this.conFormBacnetEdit.segmentationSupported = this.json.general.segmentationSupported+'';
        this.conFormBacnetEdit.vendorIdentifier = this.json.general.vendorIdentifier+'';
      }else if(row.type == 'rtu'){
        this.dialogFormVisibleRtuEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.conFormRtuEdit.name = this.json.server.name+'';
        this.conFormRtuEdit.type = this.json.server.type+'';
        this.conFormRtuEdit.method = this.json.server.method+'';
        this.conFormRtuEdit.port = this.json.server.port+'';
        this.conFormRtuEdit.baudrate = this.json.server.baudrate+'';
        this.conFormRtuEdit.timeout = this.json.server.timeout+'';
        this.conFormRtuEdit.host = this.json.server.host+'';
        this.conFormRtuEdit.byteOrder = this.json.server.byteOrder+'';
      }else if(row.type == 'request'){
        this.dialogFormVisibleRequestEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.conFormRequestEdit.host = this.json.host+'';
        this.conFormRequestEdit.SSLVerify = this.json.SSLVerify == true? '是':'否';
        this.conFormRequestEdit.type = this.json.security.type+'';
        this.conFormRequestEdit.username = this.json.security.username+'';
        this.conFormRequestEdit.password = this.json.security.password+'';
      }else if(row.type == 'odbc'){
        this.dialogFormVisibleOdbcEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.conFormOdbcEdit.str = this.json.connection.str+'';
        this.conFormOdbcEdit.autocommit = this.json.connection.attributes.autocommit == true? '是':'否';
        this.conFormOdbcEdit.timeout = this.json.connection.attributes.timeout+'';
        this.conFormOdbcEdit.encoding = this.json.connection.encoding+'';
        this.conFormOdbcEdit.char = this.json.connection.decoding.char+'';
        this.conFormOdbcEdit.wchar = this.json.connection.decoding.wchar+'';
        this.conFormOdbcEdit.metadata = this.json.connection.decoding.metadata+'';
        this.conFormOdbcEdit.reconnect = this.json.connection.reconnect == true? '是':'否';
        this.conFormOdbcEdit.reconnectPeriod = this.json.connection.reconnectPeriod+'';
        this.conFormOdbcEdit.pooling = this.json.pyodbc.pooling == true? '是':'否';
        this.conFormOdbcEdit.poll_Query = this.json.polling.query+'';
        this.conFormOdbcEdit.period = this.json.polling.period+'';
        this.conFormOdbcEdit.column = this.json.polling.iterator.column+'';
        this.conFormOdbcEdit.ite_Query = this.json.polling.iterator.query+'';
        this.conFormOdbcEdit.persistent = this.json.polling.iterator.persistent == true? '是':'否';
      }else if(row.type == 'rest'){
        this.dialogFormVisibleRestEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.conFormRestEdit.host = this.json.host+'';
        this.conFormRestEdit.port = this.json.port;
      }else if(row.type == 'serial'){
        this.dialogFormVisibleSerialEdit = true;
        this.conFormEdit.name = row.name;
        this.conFormEdit.protocolType = row.type;
        this.conFormEdit.selfType = row.selfType;
        this.conFormEdit.enable = row.enable==1?'是':'否'
        this.json = '';
        this.json = JSON.parse(row.json);
        this.conFormSerialEdit.name = this.json.name+'';
      }
    },
    submitModbusFormEdit(conFormEdit,modbusFormEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[modbusFormEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.server.type = this.modbusFormEdit.type;
                json.server.host = this.modbusFormEdit.addr;
                json.server.port = this.modbusFormEdit.port;
                json.server.timeout = this.modbusFormEdit.timeOut;
                json.server.method = this.modbusFormEdit.method;
                json.server.byteOrder = this.modbusFormEdit.byteOrder;
                json.server.baudrate = this.modbusFormEdit.baudrate;
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleModbusEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    submitPlcFormEdit(conFormEdit,plcFormEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[plcFormEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.server.type = this.plcFormEdit.type;
                json.server.host = this.plcFormEdit.addr;
                json.server.port = this.plcFormEdit.port;
                json.server.timeout = this.plcFormEdit.timeOut;
                json.server.method = this.plcFormEdit.method;
                json.server.byteOrder = this.plcFormEdit.byteOrder;
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisiblePlcEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    submitFormEdit(conFormEdit,mqttFormEdit,conTopicFormEdit,disConTopicFormEdit,ConDynamicFormEdit,disConDynamicFormEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[mqttFormEdit].validate((valid) => {
            if(valid){
                  this.$refs[conTopicFormEdit].validate((valid) => {
                    if(valid){
                      this.$refs[disConTopicFormEdit].validate((valid) => {
                        if(valid){
                          this.$refs[ConDynamicFormEdit].validate((valid) => {
                            if(valid){
                              this.$refs[disConDynamicFormEdit].validate((valid) => {
                                if(valid){
                                  this.$confirm('确定编辑吗?', '提示', {
                                    confirmButtonText: '确定',
                                    cancelButtonText: '取消',
                                    type: 'warning'
                                  }).then(() => {
                                    let con = {};
                                    con.name = this.conFormEdit.name;
                                    con.protocol_type = this.conFormEdit.protocolType;
                                    con.self_type = this.conFormEdit.selfType;
                                    con.enable = this.conFormEdit.enable=="是"?1:0;
                                    let json = this.json;
                                    json.attributeUpdates = [];
                                    json.broker.name = this.mqttFormEdit.name;
                                    json.broker.host = this.mqttFormEdit.addr;
                                    json.broker.port = this.mqttFormEdit.port;
                                    json.broker.clientId = this.mqttFormEdit.clientId;
                                    json.broker.security.type = this.mqttFormEdit.type;
                                    json.broker.security.username = this.mqttFormEdit.username;
                                    json.broker.security.password = this.mqttFormEdit.password;
                                    json.serverSideRpc.deviceNameFilter = this.rpcFormEdit.deviceNameGl;
                                    json.serverSideRpc.methodFilter = this.rpcFormEdit.methodGl
                                    json.serverSideRpc.requestTopicExpression = this.rpcFormEdit.requestTopic
                                    json.serverSideRpc.responseTopicExpression = this.rpcFormEdit.responseTopic
                                    json.serverSideRpc.responseTimeout = this.rpcFormEdit.responseCs
                                    json.serverSideRpc.valueExpression = this.rpcFormEdit.returnExp
                                    let disConDynamicArr = this.disConDynamicFormEdit.dynamicItem;
                                    let conDynamicArr = this.ConDynamicFormEdit.dynamicItem;
                                    let conJsons=[];
                                    let disConJsons=[];
                                    let lsJson = '';
                                    if(this.conTopicFormEdit.deviceNamePp == 'topic'){
                                      if(conDynamicArr.length>0){
                                        lsJson = {topicFilter:this.conTopicFormEdit.topic,
                                          deviceNameTopicExpression:this.conTopicFormEdit.exp}
                                        conJsons.push(lsJson);
                                      }else{
                                        lsJson =  {topicFilter:this.conTopicFormEdit.topic,
                                          deviceNameTopicExpression:this.conTopicFormEdit.exp};
                                        conJsons.push(lsJson);
                                      }
                                    }else{
                                      if(conDynamicArr.length>0){
                                        lsJson = {topicFilter:this.conTopicFormEdit.topic,
                                          deviceNameJsonExpression:this.conTopicFormEdit.exp}
                                        conJsons.push(lsJson);
                                      }else{
                                        lsJson = {topicFilter:this.conTopicFormEdit.topic,
                                          deviceNameJsonExpression:this.conTopicFormEdit.exp};
                                        conJsons.push(lsJson);
                                      }
                                    }
                                    if(this.disConTopicFormEdit.deviceNamePp == 'topic'){
                                      if(disConDynamicArr.length>0){
                                        lsJson ={topicFilter:this.disConTopicFormEdit.topic,
                                          deviceNameTopicExpression:this.disConTopicFormEdit.exp};
                                        disConJsons.push(lsJson);
                                      }else{
                                        lsJson = {topicFilter:this.disConTopicFormEdit.topic,
                                          deviceNameTopicExpression:this.disConTopicFormEdit.exp};
                                        disConJsons.push(lsJson);
                                      }
                                    }else{
                                      if(disConDynamicArr.length>0){
                                        lsJson = {topicFilter:this.disConTopicFormEdit.topic,
                                          deviceNameJsonExpression:this.disConTopicFormEdit.exp};
                                        disConJsons.push(lsJson);
                                      }else{
                                        lsJson = {topicFilter:this.disConTopicFormEdit.topic,
                                          deviceNameJsonExpression:this.disConTopicFormEdit.exp}
                                        disConJsons.push(lsJson);
                                      }
                                    }

                                    for(let i=0; i<disConDynamicArr.length;i++){
                                      if(disConDynamicArr[i].deviceNamePp == 'topic'){
                                        if(i==disConDynamicArr.length-1){
                                          lsJson = {topicFilter:disConDynamicArr[i].topic,
                                            deviceNameTopicExpression:disConDynamicArr[i].exp};
                                          disConJsons.push(lsJson);
                                        }else {
                                          lsJson ={topicFilter:disConDynamicArr[i].topic,
                                            deviceNameTopicExpression:disConDynamicArr[i].exp};
                                          disConJsons.push(lsJson);
                                        }
                                      }else{
                                        if(i==disConDynamicArr.length-1){
                                          lsJson ={topicFilter:disConDynamicArr[i].topic,
                                            deviceNameJsonExpression:disConDynamicArr[i].exp};
                                          disConJsons.push(lsJson);

                                        }else {
                                          lsJson = {topicFilter:disConDynamicArr[i].topic,
                                            deviceNameJsonExpression:disConDynamicArr[i].exp};
                                          disConJsons.push(lsJson);
                                        }
                                      }
                                    }
                                    for(let i=0; i<conDynamicArr.length;i++){
                                      if(conDynamicArr[i].deviceNamePp == 'topic'){
                                        if(i==conDynamicArr.length-1){
                                          lsJson = {topicFilter:conDynamicArr[i].topic,
                                            deviceNameTopicExpression:conDynamicArr[i].exp};
                                          conJsons.push(lsJson);
                                        }else {
                                          lsJson ={topicFilter:conDynamicArr[i].topic,
                                            deviceNameTopicExpression:conDynamicArr[i].exp};
                                            conJsons.push(lsJson);
                                        }
                                      }else{
                                        if(i==conDynamicArr.length-1){
                                          lsJson = {topicFilter:conDynamicArr[i].topic,
                                            deviceNameJsonExpression:conDynamicArr[i].exp};
                                          conJsons.push(lsJson);
                                        }else {
                                          lsJson = {topicFilter:conDynamicArr[i].topic,
                                            deviceNameJsonExpression:conDynamicArr[i].exp};
                                          conJsons.push(lsJson);
                                        }
                                      }
                                    }
                                    json.connectRequests = conJsons;
                                    json.disconnectRequests = disConJsons;
                                    con.json = json;
                                    updateConByName(con).then(res=> {
                                      this.dialogFormVisibleEdit = false;
                                      this.selectAllFromCon();
                                      if(res.data.result){
                                        this.$message({
                                        type: 'info',
                                        message: '编辑成功'
                                      });
                                      }else{
                                        this.$message({
                                          type: 'error',
                                          message: '编辑失败'
                                        })
                                      }
                                    })
                                  }).catch(() => {
                                      /*this.$message({
                                        type: 'info',
                                        message: '已取消删除'
                                      });*/
                                    });
                                }
                              })
                            }
                          })
                        }
                      })
                    }
                  })
            }
          })
        }
      })
    },

    submitFormOpcuaEdit(conFormEdit,conFormOpcuaEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[conFormOpcuaEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.server.name = this.conFormOpcuaEdit.name;
                json.server.url = this.conFormOpcuaEdit.url;
                json.server.timeoutInMillis = this.conFormOpcuaEdit.timeoutInMillis;
                json.server.scanPeriodInMillis = this.conFormOpcuaEdit.scanPeriodInMillis;
                json.server.disableSubscriptions = this.conFormOpcuaEdit.disableSubscriptions=="是"?true:false;
                json.server.subCheckPeriodInMillis = this.conFormOpcuaEdit.subCheckPeriodInMillis;
                json.server.showMap = this.conFormOpcuaEdit.showMap=="是"?true:false;
                json.server.security = this.conFormOpcuaEdit.security;
                json.server.identity = JSON.parse('{"type":'+'"'+this.conFormOpcuaEdit.type+'"'+'}');
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleOpcuaEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    submitFormBleEdit(conFormEdit,conFormOpcuaEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[conFormOpcuaEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.name = this.conFormBleEdit.name;
                json.rescanIntervalSeconds = this.conFormBleEdit.rescanIntervalSeconds;
                json.checkIntervalSeconds = this.conFormBleEdit.checkIntervalSeconds;
                json.scanTimeSeconds = this.conFormBleEdit.scanTimeSeconds;
                json.passiveScanMode = this.conFormBleEdit.passiveScanMode=="是"?true:false;
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleBleEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },
    submitFormBacnetEdit(conFormEdit,conFormBacnetEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[conFormBacnetEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.general.objectName = this.conFormBacnetEdit.objectName+'';
                json.general.address = this.conFormBacnetEdit.address+'';
                json.general.objectIdentifier = this.conFormBacnetEdit.objectIdentifier;
                json.general.maxApduLengthAccepted = this.conFormBacnetEdit.maxApduLengthAccepted;
                json.general.segmentationSupported = this.conFormBacnetEdit.segmentationSupported+'';
                json.general.vendorIdentifier = this.conFormBacnetEdit.vendorIdentifier;
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleBacnetEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    submitFormRtuEdit(conFormEdit,conFormRtuEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[conFormRtuEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.server.name = this.conFormRtuEdit.name+'';
                json.server.type = this.conFormRtuEdit.type+'';
                json.server.method = this.conFormRtuEdit.method;
                json.server.port = this.conFormRtuEdit.port+'';
                json.server.baudrate = this.conFormRtuEdit.baudrate;
                json.server.timeout = this.conFormRtuEdit.timeout;
                json.server.host = this.conFormRtuEdit.host+'';
                json.server.byteOrder = this.conFormRtuEdit.byteOrder+'';
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleRtuEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    submitFormRequestEdit(conFormEdit,conFormRequestEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[conFormRequestEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.host = this.conFormRequestEdit.host+'';
                json.SSLVerify = this.conFormRequestEdit.SSLVerify == '是'?true:false;
                json.security.type = this.conFormRequestEdit.type;
                json.security.username = this.conFormRequestEdit.username+'';
                json.security.password = this.conFormRequestEdit.password+'';
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleRequestEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    submitFormOdbcEdit(conFormEdit,conFormOdbcEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[conFormOdbcEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.connection.str = this.conFormOdbcEdit.str+'';
                json.connection.attributes.autocommit = this.conFormOdbcEdit.autocommit == '是'?true:false;
                json.connection.attributes.timeout = this.conFormOdbcEdit.timeout;
                json.connection.encoding = this.conFormOdbcEdit.encoding+'';
                json.connection.decoding.char = this.conFormOdbcEdit.char+'';
                json.connection.decoding.wchar = this.conFormOdbcEdit.wchar+'';
                json.connection.decoding.metadata = this.conFormOdbcEdit.metadata+'';
                json.connection.reconnect = this.conFormOdbcEdit.reconnect == '是'?true:false;
                json.connection.reconnectPeriod = this.conFormOdbcEdit.reconnectPeriod;
                json.pyodbc.pooling = this.conFormOdbcEdit.pooling == '是'?true:false;
                json.polling.query = this.conFormOdbcEdit.poll_Query+'';
                json.polling.period = this.conFormOdbcEdit.period;
                json.polling.iterator.column = this.conFormOdbcEdit.column+'';
                json.polling.iterator.query = this.conFormOdbcEdit.ite_Query+'';
                json.polling.iterator.persistent = this.conFormOdbcEdit.persistent == '是'?true:false;
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleOdbcEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    submitFormRestEdit(conFormEdit,conFormRestEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[conFormRestEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.host = this.conFormRestEdit.host+'';
                json.port = this.conFormRestEdit.port;
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleRestEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    submitFormSerialEdit(conFormEdit,conFormSerialEdit){
      this.$refs[conFormEdit].validate((valid) => {
        if(valid){
          this.$refs[conFormSerialEdit].validate((valid) => {
            if(valid){
              this.$confirm('确定编辑吗?', '提示', {
                confirmButtonText: '确定',
                cancelButtonText: '取消',
                type: 'warning'
              }).then(() => {
                let con = {};
                con.name = this.conFormEdit.name;
                con.enable = this.conFormEdit.enable =="是"?1:0;
                con.protocol_type = this.conFormEdit.protocolType;
                con.self_type = this.conFormEdit.selfType;
                let json = this.json;
                json.name = this.conFormSerialEdit.name+'';
                con.json = json;
                updateConByName(con).then(res=> {
                  if(res.data.result){
                    this.dialogFormVisibleSerialEdit = false;
                    this.selectAllFromCon();
                    this.$message({
                      type: 'info',
                      message: '编辑成功'
                    });
                  }else{
                    this.$message({
                      type: 'error',
                      message: '编辑失败'
                    });
                  }
                })
              })
            }
          })
        }
      })
    },

    handleClose(){
      this.ConDynamicFormEdit.dynamicItem=[];
      this.disConDynamicFormEdit.dynamicItem=[];
      this.dialogFormVisibleEdit = false;
      this.dialogFormVisibleModbusEdit = false;
      this.dialogFormVisiblePlcEdit = false;
    },

    cancle(){
      this.ConDynamicFormEdit.dynamicItem=[];
      this.disConDynamicFormEdit.dynamicItem=[];
      this.dialogFormVisibleEdit = false;
      this.dialogFormVisibleModbusEdit =false;
      this.dialogFormVisiblePlcEdit =false;
      this.dialogFormVisibleOpcuaEdit = false;
      this.dialogFormVisibleBleEdit = false;
      this.dialogFormVisibleBacnetEdit = false;
      this.dialogFormVisibleRtuEdit = false;
      this.dialogFormVisibleRequestEdit = false;
      this.dialogFormVisibleOdbcEdit = false;
      this.dialogFormVisibleRestEdit = false;
      this.dialogFormVisibleSerialEdit = false;
    },

    handleDelete(row) {
      this.$confirm('确定删除吗?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        deleteConByconName(row).then(res=>{
          if(res.status == 200){
            this.$message({
              type: 'success',
              message: '删除成功!'
            });
            this.total = res.data.data;
            let totalPage = Math.ceil(this.total)/this.pageSize;
            this.currentPage = this.currentPage > totalPage ? totalPage : this.currentPage;
            this.currentPage = this.currentPage < 1 ? 1 : this.currentPage;
            this.selectAllFromCon();
          }else{
            this.$message({
              type: 'success',
              message: '删除失败!'
            });
          }
        })
      }).catch(() => {
        /*this.$message({
          type: 'info',
          message: '已取消删除'
        });*/
      });
    },

    addConTopic () {
      this.ConDynamicForm.dynamicItem.push({
      })
    },

    addConTopicEdit () {
      this.ConDynamicFormEdit.dynamicItem.push({
      })
    },

    addDisConTopic () {
      this.disConDynamicForm.dynamicItem.push({
      })
    },

    addDisConTopicEdit () {
      this.disConDynamicFormEdit.dynamicItem.push({
      })
    },

    deleteConTopicItem (item, index) {
      this.ConDynamicForm.dynamicItem.splice(index, 1)
    },

    deleteConTopicItemEdit (item, index) {
      this.ConDynamicFormEdit.dynamicItem.splice(index, 1)
    },

    deleteDisConTopicItem (item, index) {
      this.disConDynamicForm.dynamicItem.splice(index, 1)
    },

    deleteDisConTopicItemEdit (item, index) {
      this.disConDynamicFormEdit.dynamicItem.splice(index, 1)
    },

    searchCon(){
      this.selectAllFromCon()
    },

    selectCon(conNameSearch){
      this.conNameSearch = conNameSearch;
    },

    selectConType(conType){
      this.conType = conType;
    },

    handleCurrentChange: function (currentPage) {
      this.currentPage = currentPage;
      this.selectAllFromCon();
    },
    handlePre(page){
      this.currentPage = page;
      this.selectAllFromCon();
    },

    handleNext(page){
      this.currentPage = page;
      this.selectAllFromCon();
    },
    resetAdd(conFormAdd,mqttFormAdd,rpcFormAdd,conTopicForm,disConTopicForm,ConDynamicForm,disConDynamicForm){
      this.$refs[conFormAdd].resetFields();
      this.$refs[mqttFormAdd].resetFields();
      this.$refs[rpcFormAdd].resetFields();
      this.$refs[conTopicForm].resetFields();
      this.$refs[disConTopicForm].resetFields();
      if(this.ConDynamicForm.dynamicItem.length>0){
        this.$refs[ConDynamicForm].resetFields();
      }
      if(this.disConDynamicForm.dynamicItem.length>0){
        this.$refs[disConDynamicForm].resetFields();
      }
    },

    resetModbusAdd(conFormAdd,conFormModbusAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormModbusAdd].resetFields();
    },

    resetPlcAdd(conFormAdd,conFormPlcAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormPlcAdd].resetFields();
    },

    resetOpcuaAdd(conFormAdd,conFormOpcuaAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormOpcuaAdd].resetFields();
    },

    resetBleAdd(conFormAdd,conFormBleAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormBleAdd].resetFields();
    },

    resetBacnetAdd(conFormAdd,conFormBacnetAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormBacnetAdd].resetFields();
    },
    resetRtuAdd(conFormAdd,conFormRtuAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormRtuAdd].resetFields();
    },
    resetRequestAdd(conFormAdd,conFormRequestAdd){
        this.$refs[conFormAdd].resetFields();
        this.$refs[conFormRequestAdd].resetFields();
    },
    resetOdbcAdd(conFormAdd,conFormOdbcAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormOdbcAdd].resetFields();
    },
    resetRestAdd(conFormAdd,conFormRestAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormRestAdd].resetFields();
    },
    resetSerialAdd(conFormAdd,conFormSerialAdd){
      this.$refs[conFormAdd].resetFields();
      this.$refs[conFormSerialAdd].resetFields();
    },
    resetAddZdy(conFormAddZdy){
      this.$refs[conFormAddZdy].resetFields();
    },

  }

}
</script>

<style >
.el-dialog{
  display: flex;
  flex-direction: column;
  margin:0 !important;
  position:absolute;
  top:50%;
  left:50%;
  transform:translate(-50%,-50%);
  /*height:600px;*/
  max-height:calc(105% - 10px);
  max-width:calc(100% - 30px);
}
.el-dialog .el-dialog__body{
  flex:1;
  overflow: auto;
}
</style>
