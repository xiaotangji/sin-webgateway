<template>
  <div style="height: 80%">
    <el-row class="basicCan">
      <h2>设备名称： {{this.deviceName}}</h2>
      <h3>json配置</h3>
      <el-col :span="8" v-for="con in requestList"><div class="grid-content bg-purple"></div>
          <div class="grid-content bg-purple">
            <el-card :body-style="{ padding: '0px'}" >
              <div style="padding: 14px;">
                {{ con.url }}
                <div class="bottom clearfix">
                  {{ con.httpMethod}}
                </div>
                <div class="bottom clearfix">
                  <el-tooltip class="item" effect="dark" content="编辑" placement="top-start">
                    <el-button type="primary" icon="el-icon-edit" size="mini" @click="handleEdit(con)" circle></el-button>
                  </el-tooltip>
                </div>
              </div>
            </el-card>
            <span>&emsp;</span>
          </div>
      </el-col>
      <el-col :span="8"><div class="grid-content bg-purple"></div>
        <el-form :model="ruleFormRpc" :rules="rulesRpc" ref="ruleFormRpc" label-width="100px" class="demo-ruleForm">
          <el-form-item style="margin-left: 10%;width: 80%" prop="textareaJsonRpc">
            rpcJson:<el-input
            type="textarea"
            placeholder="请输入json"
            :rows="7"
            v-model="ruleFormRpc.textareaJsonRpc">
          </el-input>
          </el-form-item>
        </el-form>
      </el-col>
      <el-col :span="8"><div class="grid-content bg-purple"></div>
        <el-form :model="ruleFormUpdateJson" :rules="rulesUpdateJson" ref="ruleFormUpdate" label-width="100px" class="demo-ruleForm">
          <el-form-item style="margin-left: -10%;width: 80%" prop="textareaJsonRpc">
            updateJson:<el-input
              type="textarea"
              placeholder="请输入json"
              :rows="7"
              v-model="ruleFormUpdateJson.textareaJsonUpdate">
            </el-input>
          </el-form-item>
          <el-button style="margin-left: -18%;margin-top: 3%" type="primary" @click="submitFormSave('ruleFormRpc','ruleFormUpdate')">保存</el-button>
          <el-button style="margin-left: 8%;margin-top: 10px" @click="resetForm('ruleFormRpc','ruleFormUpdate')">重置</el-button>
        </el-form>
      </el-col>
    </el-row>
    <el-row class="toolPanel">
      <div style="float: right">
        <span style="font-size: medium">操作：</span>
        <el-tooltip class="item" effect="dark" content="添加" placement="top-start">
          <el-button type="success" size="mini" icon="el-icon-circle-plus" circle style="float: right" @click="addVariable"></el-button>
        </el-tooltip>
      </div>
    </el-row>
    <el-row>
      <div class="headName">
      <h3>变量列表(Serial配置)</h3>
      <span>&nbsp;</span>
      </div>
      <el-table
        :data="tableData.rows"
        :height="tableData.height"
        stripe
        border
        style="width: 100%">
        <el-table-column
          type="index"
          :index="indexMethod"
          width="50">
        </el-table-column>
        <el-table-column
          prop="device_name"
          label="设备名称"
          width="150">
        </el-table-column>
        <el-table-column
          prop="tag_category"
          label="变量类别"
          width="150">
        </el-table-column>
        <el-table-column
          prop="tag_type"
          label="type"
          width="150">
        </el-table-column>
        <el-table-column
          prop="key_express"
          label="key"
          width="120">
        </el-table-column>
        <el-table-column
          prop="data_calculation"
          label="untilDeliiter"
          width="130">
        </el-table-column>
        <el-table-column
          prop="function_code"
          label="fromByte"
          width="150">
        </el-table-column>
        <el-table-column
          prop="count"
          label="toByte"
          width="150">
        </el-table-column>
        <el-table-column
          prop="description"
          label="描述">
        </el-table-column>
        <el-table-column label="操作">
          <template slot-scope="scope">
            <el-tooltip class="item" effect="dark" content="编辑" placement="top-start">
              <el-button type="primary" icon="el-icon-edit" size="mini" @click="handleEdit(scope.$index, scope.row)" circle></el-button>
            </el-tooltip>
            <el-tooltip class="item" effect="dark" content="删除" placement="top-start">
              <el-button type="danger" icon="el-icon-delete" size="mini" @click="handleDelete(scope.$index, scope.row)" circle></el-button>
            </el-tooltip>
          </template>
        </el-table-column>
      </el-table>
    </el-row>
    <el-row class="paginationPanel">
      <el-pagination
        background
        @size-change="handleSizeChange"
        @current-change="handleCurrentChange" :current-page="this.tableData.currentPage"
        :page-sizes="[10, 20, 50, 100]"
        :page-size="this.tableData.pageSize"
        layout="total,sizes, prev, pager,next,jumper"
        :total="this.tableData.total">
      </el-pagination>
    </el-row>
    <el-dialog title="添加Serial变量"  :close-on-click-modal="false" :visible.sync="dialogFormVisibleAdd">
      <el-form :model="serialFormAdd" style="margin-left: 27%" :rules="serialRulesAdd" ref="serialFormAdd" size="mini" label-width="130px" class="demo-ruleForm">
        <el-form-item label="设备名称：" prop="device_name" style="width: 60%">
          <el-input v-model="serialFormAdd.device_name" disabled style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="变量类别：" prop="tag_category" style="width: 60%">
          <el-select v-model="serialFormAdd.tag_category" @change="selectValue">
            <el-option label="attributes" value="attributes"></el-option>
            <el-option label="telemetry" value="telemetry"></el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="key：" prop="key"  style="width: 60%">
          <el-input v-model="serialFormAdd.key"  style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="type：" prop="type"  style="width: 60%">
          <el-input v-model="serialFormAdd.type"  style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="untilDelimiter：" v-if="this.untilDelimiterShow" prop="untilDelimiter" style="width: 60%">
          <el-input v-model="serialFormAdd.untilDelimiter"  style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="fromByte：" v-if="this.fromByteShow" prop="fromByte" style="width: 60%">
          <el-input v-model="serialFormAdd.fromByte"  style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="toByte：" v-if="this.toByteShow" prop="toByte" style="width: 60%">
          <el-input v-model="serialFormAdd.toByte"  style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="描述：" prop="description" style="width: 60%">
          <el-input
            type="textarea"
            placeholder="请输入内容"
            v-model="serialFormAdd.description"
            maxlength="30"
            show-word-limit
          >
          </el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="submitSerialFormAdd('serialFormAdd')">确定</el-button>
          <el-button @click="cancleFormAdd('serialFormAdd')">取消</el-button>
        </el-form-item>
      </el-form>
    </el-dialog>
    <el-dialog title="编辑Serial变量"  :close-on-click-modal="false" :visible.sync="dialogFormVisibleEdit">
      <el-form :model="serialFormEdit" style="margin-left: 27%" :rules="serialRulesEdit" ref="serialFormEdit" size="mini" label-width="130px" class="demo-ruleForm">
        <el-form-item label="设备名称：" prop="device_name" style="width: 60%">
          <el-input v-model="serialFormEdit.device_name" disabled style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="变量类别：" prop="tag_category" style="width: 60%">
          <el-select disabled v-model="serialFormEdit.tag_category">
            <el-option label="attributes" value="attributes"></el-option>
            <el-option label="telemetry" value="telemetry"></el-option>
          </el-select>
        </el-form-item>
        <el-form-item label="key：" prop="key" style="width: 60%">
          <el-input v-model="serialFormEdit.key" style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="type："  prop="type " style="width: 60%">
          <el-input v-model="serialFormEdit.type " style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="untilDelimiter：" v-if="this.untilDelimiterShow" prop="untilDelimiter " style="width: 60%">
          <el-input v-model="serialFormEdit.untilDelimiter " style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="fromByte：" v-if="this.fromByteShow" prop="fromByte" style="width: 60%">
          <el-input v-model="serialFormEdit.fromByte"  style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="toByte：" v-if="this.toByteShow" prop="toByte" style="width: 60%">
          <el-input v-model="serialFormEdit.toByte"  style="width: auto"></el-input>
        </el-form-item>
        <el-form-item label="描述：" prop="description" style="width: 60%">
          <el-input
            type="textarea"
            placeholder="请输入内容"
            v-model="serialFormEdit.description"
            maxlength="30"
            show-word-limit
          >
          </el-input>
        </el-form-item>
        <el-form-item>
          <el-button type="primary" @click="submitOdbcFormEdit('serialFormEdit')">确定</el-button>
          <el-button @click="cancleFormEdit('serialFormEdit')">取消</el-button>
        </el-form-item>
      </el-form>
    </el-dialog>
    <el-dialog title="编辑Request"  :close-on-click-modal="false"  width="66%"  :visible.sync="dialogFormVisibleRequestEditFirst">
      <el-row :gutter="20" style="margin-left: 13%">
        <el-col :span="12"><div class="grid-content bg-purple">
          Request
          <el-form :model="conFormRequestEditFirst" style="margin-left: 27%" :rules="conRequestRuleFirst" ref="conFormRequestEditFirst" size="mini" label-width="130px" class="demo-ruleForm">
            <el-form-item label="地址：" prop="url" label-width="45%" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.url" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="httpMethod：" label-width="45%" prop="httpMethod" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.httpMethod" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="ACCEPT：" label-width="45%" prop="ACCEPT" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.ACCEPT" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="name：" label-width="45%" prop="name" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.name" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="job：" label-width="45%" prop="job" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.job" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="是否可以直连：" label-width="45%" prop="allowRedirects" style="width: 150%">
              <el-radio-group v-model="conFormRequestEditFirst.allowRedirects" style="margin-left: 3%">
                <el-radio label="是" value="1"></el-radio>
                <el-radio label="否" value="0"></el-radio>
              </el-radio-group>
            </el-form-item>
            <el-form-item label="超时时间：" label-width="45%" prop="timeout" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.timeout" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="scanPeriod：" label-width="45%" prop="scanPeriod" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.scanPeriod" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="converter_type：" label-width="45%" prop="converter_type" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.converter_type" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="deviceNameJsonExpression：" label-width="45%" prop="deviceNameJsonExpression" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.deviceNameJsonExpression" style="width: 60%;"></el-input>
            </el-form-item>
            <el-form-item label="deviceTypeJsonExpression：" label-width="45%" prop="deviceTypeJsonExpression" style="width: 150%">
              <el-input v-model="conFormRequestEditFirst.deviceTypeJsonExpression" style="width: 60%;"></el-input>
            </el-form-item>
          </el-form>
        </div>
        </el-col>
      </el-row>
      <div style="text-align: center;margin-left: 10%">
        <el-button type="primary" @click="submitFormRequestEditFirst('conFormRequestEditFirst')">提交</el-button>
        <el-button @click="reset('conFormRequestEditFirst')">重置</el-button>
      </div>
    </el-dialog>
  </div>
</template>

<script>
import $ from "jquery";
import {
  addDeviceVariable,
  deleteDeviceVariableById,
  selectAllFromDeviceVariable,
  updateDeviceVariableById
} from "../../../api/deviceVariable";
import {
  selectJsonUpdateJsonRpcJsonFromDeviceByDeviceName,
  updateDeviceByDeviceName
} from "../../../api/device";

export default {
  name: "requestVariableList",
  data() {
    return {
      tableData: {
        height: 600,
        sort: "",
        order: "",
        page: 1,
        rows: [],
        currentPage: 1,
        pageSize: 10,
        total: null,
      },
      ruleForm: {
        textareaJsonUpdate: ''
      },
      ruleFormUpdateJson:{
        textareaJsonUpdate:''
      },
      ruleFormJson:{
        type: '',
        name: '',
        port: '',
        baudrate: '',
        converter: ''
      },
      serialFormAdd: {
        device_name: '',
        serialFormAdd:'',
        type: '',
        tag_category: '',
        key  : '',
        untilDelimiter: '',
        fromByte : '',
        toByte: '',
        description: ''
      },
      serialFormEdit: {
        device_name: '',
        type: '',
        tag_category: '',
        key: '',
        untilDelimiter: '',
        fromByte : '',
        toByte: '',
        description: ''
      },
      conFormRequestEditFirst:{
        url: '',
        httpMethod: '',
        ACCEPT: '',
        name: '',
        job: '',
        allowRedirects: '',
        timeout: '',
        scanPeriod: '',
        converter_type: '',
        deviceNameJsonExpression: '',
        deviceTypeJsonExpression: '',
      },
      ruleFormRpc:{
        textareaJsonRpc:'',
      },
      rules: {
        textareaJson: [
          { required: true, message: '请输入json', trigger: 'blur' },
          { min: 1, max:1000,message: '长度在 1 到 1000 个字符', trigger: 'blur' }
        ]
      },
      rulesUpdateJson: {
        attributeOnThingsBoard: [
          { required: true, message: '请输入json', trigger: 'blur' },
          { min: 1, max:1000,message: '长度在 1 到 1000 个字符',trigger: 'blur' }
        ],
        stringToDevice: [
          { required: true, message: '请输入json', trigger: 'blur' },
          { min: 1, max:1000,message: '长度在 1 到 1000 个字符',trigger: 'blur' }
        ]
      },
      rulesJson: {
        name: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 1, max:1000,message: '长度在 1 到 1000 个字符',trigger: 'blur' }
        ],
        type: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        baudrate: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        port: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        converter: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ]
      },
      conRequestRuleFirst:{
        url: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        httpMethod: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        ACCEPT: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        name: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        job: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        allowRedirects: [
          { required: true, message: '请选择', trigger: 'change' }
        ],
        timeout: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        converter_type: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        deviceNameJsonExpression: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
        deviceTypeJsonExpression: [
          { required: true, message: '请输入', trigger: 'blur' },
          { min: 2, max:100,message: '长度在 2 到 100 个字符',trigger: 'blur' }
        ],
      },
      rulesRpc: {
        textareaJsonRpc: [
          { required: true, message: '请输入json', trigger: 'blur' },
          { min: 1, max:1000,message: '长度在 1 到 1000 个字符',trigger: 'blur' }
        ]
      },
      serialRulesAdd: {
        tag_category: [
          { required: true, message: '请选择变量类别', trigger: 'change' }
        ],
        key: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        type: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        untilDelimiter: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        fromByte: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        toByte: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        description: [
          {required: true, message: '请输入描述信息', trigger: 'blur'},
          {min: 1, max: 30, message: '长度在 1 到 30 个字符', trigger: 'blur'}
        ]
      },
      serialRulesEdit: {
        tag_category: [
          { required: true, message: '请选择变量类别', trigger: 'change' }
        ],
        key: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        type: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        untilDelimiter: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        fromByte: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        toByte: [
          {required: true, message: '请输入', trigger: 'blur'},
          {min: 1, max: 100, message: '长度在 1 到 100 个字符', trigger: 'blur'}
        ],
        description: [
          {required: true, message: '请输入描述信息', trigger: 'blur'},
          {min: 1, max: 30, message: '长度在 1 到 30 个字符', trigger: 'blur'}
        ]
      },
      deviceName: '',
      dialogFormVisibleAdd: false,
      dialogFormVisibleEdit: false,
      intervalVariable : null,
      labelPosition: 'left',
      untilDelimiterShow: false,
      fromByteShow: false,
      toByteShow: false,
      requestList:[],
      dialogFormVisibleRequestEditFirst: false
    }
  },
  created () {
    this.getParams();
    this.selectAllFromDeviceVariable();
    this.selectAllFromDevice(this.deviceName);
  },
  beforeDestroy(){
    clearInterval(this.intervalVariable);
  },
  watch: {
    '$route' (to, from) {
      // 路由发生变化页面刷新
      this.getParams();
      if(this.id != undefined){
        this.selectAllFromDeviceVariable();
      }

      if(this.deviceName != undefined){
        this.selectAllFromDevice(this.deviceName);
      }
    }
  },


  methods: {
    setInterval(){
      if (this.intervalVariable) {
        clearInterval(this.intervalVariable);
        this.intervalVariable = null;
        this.setInterval()
      } else {
        this.intervalVariable = setInterval(() => {
          setTimeout(this.selectAllFromDeviceVariable,0);
        }, 5000)
      }
    },

    getParams(){
               // 取到路由带过来的参数
               this.deviceName = this.$route.query.name;
               this.id = this.$route.query.id;
             },

    selectAllFromDevice(deviceName){
      selectJsonUpdateJsonRpcJsonFromDeviceByDeviceName(deviceName).then(res=>{
        if(res.data.result){
          if(res.data.data.length>0){
            this.requestList = [];
            this.ruleFormUpdateJson.textareaJsonUpdate = JSON.parse(JSON.stringify(res.data.data[0].updateJson)) ==null? '':JSON.parse(JSON.stringify(res.data.data[0].updateJson))+'' ;
            this.ruleFormRpc.textareaJsonRpc = JSON.parse(JSON.stringify(res.data.data[0].rpcJson)) ==null? '':JSON.parse(JSON.stringify(res.data.data[0].rpcJson))+'' ;
    /*        this.ruleFormUpdateJson.textareaJsonUpdate = JSON.parse(JSON.stringify(res.data.data[0].updateJson)) ==null? '':JSON.parse(JSON.stringify(res.data.data[0].updateJson))+'' ;
            this.ruleFormJson.type  = JSON.parse(JSON.stringify(res.data.data[0].json))==null? '':JSON.parse(res.data.data[0].json).type+'';
            this.ruleFormJson.name = JSON.parse(JSON.stringify(res.data.data[0].json))==null? '':JSON.parse(res.data.data[0].json).name+'';
            this.ruleFormJson.port = JSON.parse(JSON.stringify(res.data.data[0].json))==null? '':JSON.parse(res.data.data[0].json).port+'';
            this.ruleFormJson.baudrate = JSON.parse(JSON.stringify(res.data.data[0].json))==null? '':JSON.parse(res.data.data[0].json).baudrate+'';
            this.ruleFormJson.converter = JSON.parse(JSON.stringify(res.data.data[0].json))==null? '':JSON.parse(res.data.data[0].json).converter+'';*/
          }
        }else{
          this.$message({
            type: 'error',
            message: '查询失败!'
          });
        }
      })
    },

    selectValue(v){
      if(v == 'telemetry'){
        this.untilDelimiterShow = true;
        this.fromByteShow = false;
        this.toByteShow =false;
      }else if(v == 'attributes'){
        this.untilDelimiterShow = false;
        this.fromByteShow = true;
        this.toByteShow =true;
      }
    },

    selectAllFromDeviceVariable(){
      selectAllFromDeviceVariable(this.id,(this.tableData.currentPage-1)*this.tableData.pageSize,this.tableData.pageSize,this.tableData.sort,this.tableData.order).then(res=>{
        this.tableData.rows = [];
        this.tableData.total = null;
        this.updateHeight();
        clearInterval(this.intervalVariable);
        if(res.data.result){
          this.tableData.rows = res.data.data.data;
          this.tableData.total =  res.data.data.count;
          this.setInterval();
        }
      })
    },


    handleSizeChange: function (size) {
      this.tableData.pageSize = size;
      //this.handleCurrentChange(this.currentPage);
      this.selectAllFromDevice();
    },
    handleCurrentChange: function (currentPage) {
      this.tableData.currentPage = currentPage;
      //this.currentChangePage(this.tableData,currentPage)
      this.selectAllFromDevice();
    },
    //分页方法（重点）
    currentChangePage(list,currentPage) {
      let from = (currentPage - 1) * this.tableData.pageSize;
      let to = currentPage * this.tableData.pageSize;
      this.tempList = [];
      for (; from < to; from++) {
        if (list[from]) {
          this.tempList.push(list[from]);
        }
      }
    },
    submitFormSave(ruleFormRpc,ruleFormUpdate){
              this.$refs[ruleFormUpdate].validate((valid) => {
                if (valid){
                  this.$refs[ruleFormUpdate].validate((valid) => {
                    if(valid){
                      this.$confirm('确定保存吗?', '提示', {
                        confirmButtonText: '确定',
                        cancelButtonText: '取消',
                        type: 'warning'
                      }).then(() => {
                        let device = {};
                        device.updateJson = this.ruleFormUpdateJson.textareaJsonUpdate;
                        device.rpcJson = this.ruleFormRpc.textareaJsonRpc;
                        device.device_name = this.deviceName;
                        updateDeviceByDeviceName(device).then(res => {
                          if (res.data.result) {
                            this.$message({
                              type: 'success',
                              message: '保存成功!'
                            });
                            this.selectAllFromDevice(this.deviceName);
                          } else {
                            this.$message({
                              type: 'error',
                              message: '保存失败!'
                            });
                          }
                        })
                      })
                    }
                  })
                    }
                  })

    },
    submitFormSaveJson(ruleFormJson){
      this.$refs[ruleFormJson].validate((valid) => {
        if (valid) {
          this.$confirm('确定保存吗?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            let device = {}
            device.json = '{"name":"' + this.ruleFormJson.name+'",'
            + '"type":"'+this.ruleFormJson.type+'",'
            +  '"port":"'+ this.ruleFormJson.port+'",'
            +  '"baudrate":' + this.ruleFormJson.baudrate+','
            +  '"converter":"' + this.ruleFormJson.converter+'"'
            +  '}'
            device.device_name = this.deviceName;
            updateDeviceByDeviceName(device).then(res => {
              if (res.data.result) {
                this.$message({
                  type: 'success',
                  message: '保存成功!'
                });
                this.selectAllFromDevice(this.deviceName);
              } else {
                this.$message({
                  type: 'error',
                  message: '保存失败!'
                });
              }
            })
          })
        }
      })
    },

    cancleFormAdd(serialFormAdd){
      this.$refs[serialFormAdd].resetFields();
      this.dialogFormVisibleAdd = false;
      this.nameShow = false;
      this.valueShow =false;
      this.attributeValueShow = false;
    },

    cancleFormEdit(odbcFormEdit){
      this.$refs[odbcFormEdit].resetFields();
      this.dialogFormVisibleEdit = false;
    },

    resetForm(ruleFormRpc,ruleFormUpdate) {
      this.$refs[ruleFormRpc].resetFields();
      this.$refs[ruleFormUpdate].resetFields();
      this.ruleFormJson = {};
      this.ruleFormUpdateJson = {};
    },
    resetFormJson(ruleFormJson) {
      this.$refs[ruleFormJson].resetFields();
      this.ruleFormJson = {};
    },
    indexMethod(index) {
      return (this.tableData.currentPage - 1) * this.tableData.pageSize + index + 1
    },

    submitSerialFormAdd(serialFormAdd){
      this.$refs[serialFormAdd].validate((valid) => {
        if (valid)
          this.$confirm('确定保存吗?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            let deviceVariable = {};
            deviceVariable.tag_category = this.serialFormAdd.tag_category;
            deviceVariable.tag_type = this.serialFormAdd.type;
            deviceVariable.key_express = this.serialFormAdd.key;
            deviceVariable.data_calculation = this.serialFormAdd.untilDelimiter;
            deviceVariable.function_code = this.serialFormAdd.fromByte;
            deviceVariable.count = this.serialFormAdd.toByte;
            deviceVariable.description = this.serialFormAdd.description;
            deviceVariable.device_name = this.deviceName;
            addDeviceVariable(deviceVariable).then(res=>{
                if(res.data.result){
                  this.$message({
                    type: 'success',
                    message: '添加成功!'
                  });
                  this.selectAllFromDeviceVariable(this.id,(this.tableData.currentPage-1)*this.tableData.pageSize,this.tableData.pageSize,this.tableData.sort,this.tableData.order);
                  this.$refs[serialFormAdd].resetFields();
                  this.dialogFormVisibleAdd = false;
                }else{
                  this.$message({
                    type: 'error',
                    message: '添加失败!'
                  });
                }
            })
          })
      })
    },

    submitOdbcFormEdit(serialFormEdit){
      this.$refs[serialFormEdit].validate((valid) => {
        if (valid)
          this.$confirm('确定编辑吗?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning'
          }).then(() => {
            let serial = {};
            serial.description = this.serialFormEdit.description;
            serial.tag_category = this.serialFormEdit.tag_category;
            serial.tag_type = this.serialFormEdit.type;
            serial.key_express = this.serialFormEdit.key;
            serial.data_calculation = this.serialFormEdit.untilDelimiter;
            serial.function_code = this.serialFormEdit.fromByte;
            serial.count = this.serialFormEdit.toByte;
            serial.id = this.serialFormEdit.id;
            updateDeviceVariableById(serial).then(res=>{
              if(res.data.result){
                this.$message({
                  type: 'success',
                  message: '编辑成功!'
                });
                this.selectAllFromDeviceVariable(this.id,(this.tableData.currentPage-1)*this.tableData.pageSize,this.tableData.pageSize,this.tableData.sort,this.tableData.order);
                this.dialogFormVisibleEdit = false;
                this.$refs[serialFormEdit].resetFields();
              }else{
                this.$message({
                  type: 'error',
                  message: '编辑失败!'
                });
              }
            })
          })
      })
    },

    handleEdit(index,row){
      if(row.tag_category == 'telemetry'){
        this.untilDelimiterShow = true;
        this.fromByteShow =false;
        this.toByteShow = false;
      }else if(row.tag_category == 'attributes'){
        this.untilDelimiterShow = false;
        this.fromByteShow =true;
        this.toByteShow = true;
      }
      this.serialFormEdit.tag_category = row.tag_category+'';
      this.serialFormEdit.type = row.tag_type+'';
      this.serialFormEdit.key = row.key_express+'';
      this.serialFormEdit.untilDelimiter = row.data_calculation+'';
      this.serialFormEdit.fromByte  = row.function_code;
      this.serialFormEdit.toByte = row.count;
      this.serialFormEdit.description = row.description+'';
      this.serialFormEdit.id = row.id;
      this.serialFormEdit.device_name = this.deviceName;
      this.dialogFormVisibleEdit = true;
    },
    handleDelete(index,row){
      this.$confirm('确定删除吗?', '提示', {
        confirmButtonText: '确定',
        cancelButtonText: '取消',
        type: 'warning'
      }).then(() => {
        deleteDeviceVariableById(row.id).then(res=>{
          if(res.data.result){
            this.$message({
              type: 'success',
              message: '删除成功!'
            });
            this.selectAllFromDeviceVariable(this.id,(this.tableData.currentPage-1)*this.tableData.pageSize,this.tableData.pageSize,this.tableData.sort,this.tableData.order);
          }else{
            this.$message({
              type: 'error',
              message: '删除失败!'
            });
          }
        })
      })
    },

    reset(conFormRequestEditFirst){
      this.$refs[conFormRequestEditFirst].resetFields();
    },
    // 判断是否为json格式
    isJSON(str) {
      if (typeof str == 'string') {
        try {
          var obj = JSON.parse(str);
          if (typeof obj == 'object' && obj) {
            return true;
          } else {
            return false;
          }

        } catch (e) {
          console.log('error：' + str + '!!!' + e);
          return false;
        }
      }
    },
    addVariable(){
        this.dialogFormVisibleAdd = true;
        this.serialFormAdd.device_name = this.deviceName;
    },
    // 更新表格高度
    updateHeight() {
      this.tableData.height =
        window.innerHeight -
          $(".paginationPanel").height() -
          $(".toolPanel").height()-$(".basicCan").height()-$(".headName").height()-120;
    },
  }
}
</script>

<style scoped>

</style>
